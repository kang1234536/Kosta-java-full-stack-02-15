// 삼월 16일차
//jdbc
-- jobs departments employees 이용
----2021-3-16
----ORACLE문법
select first_name,salary,job_title,min_salary
from employees,jobs,departments
where employees.job_id=jobs.job_id
and employees.department_id=departments.department_id;

----표준문법 (ANSI)
select first_name,salary,job_title,min_salary
from employees join jobs using(job_id) join departments using(department_id);



select first_name,salary,job_title,min_salary
from employees join jobs on(employees.job_id=jobs.job_id) join departments on( employees.department_id=departments.department_id);


select first_name,salary,job_title,min_salary,department_name
from employees join jobs on(employees.job_id=jobs.job_id) left outer join departments on( employees.department_id=departments.department_id);

select first_name,salary,job_title,min_salary,nvl(department_name,'부서없음') 부서이름, departments.department_id
from employees join jobs on(employees.job_id=jobs.job_id) left outer join departments on( employees.department_id=departments.department_id);

select first_name,salary,job_title,min_salary,nvl(department_name,'부서없음') 부서이름, nvl2(departments.department_id,to_char(departments.department_id),'부서 없음') 부서번호
from employees join jobs on(employees.job_id=jobs.job_id) left outer join departments on( employees.department_id=departments.department_id);
--nvl (대상,null이면 출력값)
--nvl2(대상,아닌경우,null경우)
select first_name,salary,job_title,min_salary,nvl(department_name,'부서없음') 부서이름, nvl2(departments.department_id,to_char(departments.department_id),'부서 없음') 부서번호,
nvl(to_char(departments.department_id),'부서없음') 부서번호2
from employees join jobs on(employees.job_id=jobs.job_id) left outer join departments on( employees.department_id=departments.department_id);

select first_name,salary,job_title,min_salary,nvl(department_name,'부서없음') 부서이름, nvl2(departments.department_id,to_char(departments.department_id),'부서 없음') 부서번호,
nvl(to_char(departments.department_id),'부서없음') 부서번호2
from employees join jobs on(employees.job_id=jobs.job_id) full outer join departments on( employees.department_id=departments.department_id);


--join ==  inner join
--join: equal join , non-equal join , inner join , outer join , self join, cross join

---부서의 부서장 정보를 알아보기: 이름 급여, 입사일
select *
from departments;

select departments.*,employees.first_name,employees.salary,employees.hire_date
from departments join employees on(departments.manager_id= employees.employee_id);

select departments.*,employees.first_name,employees.salary,employees.hire_date
from departments left outer join employees on(departments.manager_id= employees.employee_id);
--self join
select *
from employees;

select 직원.first_name, 직원.salary,매니저.first_name, 매니저.salary
from employees 직원,employees 매니저
where 직원.manager_id=매니저.employee_id(+);

select 직원.first_name, 직원.salary,nvl(매니저.first_name,'매니저 없음') 매니저이름, nvl(매니저.salary,0) 매니저급여
from employees 직원,employees 매니저
where 직원.manager_id=매니저.employee_id(+);

select 직원.first_name, 직원.salary,nvl(매니저.first_name,'매니저 없음') 매니저이름, nvl(매니저.salary,0) 매니저급여
from employees 직원 left outer join employees 매니저
on( 직원.manager_id=매니저.employee_id);


----스티븐과 같은 부서에 근무하는 직원들
select *
from employees
where department_id in (select department_id
from employees
where first_name='Steven');




select *
from employees
where job_id = (select job_id
from employees
where first_name='Lex');


select *
from employees
where salary >= (select salary
from employees
where first_name='Lex')
 and first_name <>'Lex';


--직속상관이 Steven인 직원들
--다치 불가 : 한건의 하나의 칼럼이 값을 여러개가 가질수 없다. 
select *
from employees;

select *
from employees 직원, employees 직속상관
where 직원.manager_id=직속상관.employee_id and 직속상관.first_name='Steven';

select *
from employees 직원
where 직원.manager_id in(select 직속상관.employee_id
from employees 직속상관
where 직속상관.first_name='Steven');


---sub query 안에 그룹함수 넣기---
select *
from employees
where salary>(
select avg(salary)
from employees);




select *
from employees
where salary>=10000;

--급여가 10000이상인 부서의 직원들
select *
from employees
where department_id in(select distinct department_id
from employees
where salary>=10000);
-- =any : 아무거나 일치
select *
from employees
where department_id =any(select distinct department_id
from employees
where salary>=10000);
-- =all : 모두일치

select *
from employees
where department_id =all(select distinct department_id
from employees
where salary>=10000);


--부서별 가장 급여를 많이 받는 사원정보
--- multi column칼럼 sub query
select *
from employees
where (department_id, salary )  in(
select department_id, max(salary) 최대급여
from employees
group by department_id);


--직급(job)이 IT_PROG인 사람의 속한 부서의 부서번호와 부서명과 지역을 출력하시오
select *
from departments
where department_id=(
select distinct department_id
from employees
where job_id='IT_PROG');

select *
from departments
where department_id in(
select  department_id
from employees
where job_id='IT_PROG');

select *
from departments
where department_id =any(
select  department_id
from employees
where job_id='IT_PROG');


--ALL연산자 : 최대보다 크다
select *
from employees
where salary>all(
select salary
from employees
where department_id =60);

--Any연산자 : 최소보다 크다  --> 최소값은 4200
select *
from employees
where salary>any(
select salary
from employees
where department_id =60);

--in  값이 들어가기만하면됨
select *
from employees
where salary in(
select salary
from employees
where department_id =60);

--본인이 받는 급여가 본인이 속한 부서의 평균 급여보다 적은 급여를 받는 지원의 이름, 부서번호 , 급여를 조회하시오.
--상관형 subquery
select *
from employees aa
where salary < (select avg(salary)
from employees
where department_id=aa.department_id);

--가상의 테이블(inline view)


select *
from employees aa,(select department_id, avg(salary) avg_sal
from employees
group by department_id) bb
where aa.department_id =bb.department_id and aa.salary<avg_sal;

--평균급여보다 높고 최대 급여보다 낮은 원급을 받는 사원들을 조회하시오

select *
from employees
where salary>(select avg(salary)from employees)
and salary<(select max(salary)from employees);

select employees.*,(select avg(salary)from employees),(select max(salary)from employees)
from employees
where salary>(select avg(salary)from employees)
and salary<(select max(salary)from employees);


select *
from employees , (select avg(salary) sal from employees) aa,(select max(salary) sal from employees)  bb
where salary>aa.sal and salary<bb.sal;

select employees.*,aa.sal,bb.sal
from employees , (select avg(salary) sal from employees) aa,(select max(salary) sal from employees)  bb
where salary>aa.sal and salary<bb.sal;

select *
from departments;

select first_name,salary,hire_date
from employees
where department_id =(
select department_id
from departments
where department_name='IT'
);
select *
from departments;
select *
from employees;



select first_name, department_id
from employees
where department_id in (select department_id from employees where first_name = 'Alexander');


select *
from employees
where department_id in(select department_id
from departments
)
and department_id is null;


select first_name,hire_date,nvl(department_name,'부서없음')
from employees left outer join departments using (department_id);

select *
from  jobs;
select first_name,salary,job_title,decode(substr(job_title,-7,7),'Manager',salary*0.5,salary) "급여"
from employees join jobs using (job_id)

select first_name,salary,job_title,decode(substr(job_title,-7,7),'Manager',salary*0.5,salary) "급여",
case when job_title like '%Manager%' then salary *0.5 else salary end "급여2",
case when substr(job_title,-7,7)='Manager' then salary *0.5 else salary end "급여3"
from employees join jobs using (job_id);

--5. 각 부서별로 최저급여를 받는 직원의 이름과 부서id, 급여를 조회하시오.
select first_name, department_id,salary  --(다중 칼럼)
from employees
where(department_id,salary) in(select
department_id,min(salary)
from employees
group by department_id);

select first_name, aa.department_id,salary  --(inline view)
from employees aa, (select
department_id,min(salary) min_sal
from employees
group by department_id) bb
where aa.department_id=bb.department_id and aa.salary = bb.min_sal;




select *
from departments;
--1. 80번부서의 평균급여보다 많은 급여를 받는 직원의 이름, 부서id, 급여를 조회하시오.
select first_name,department_id,salary
from employees
where salary>(
select avg(salary)
from employees
where department_id=80);
2. 'South San Francisco'에 근무하는 직원의 최소급여보다 급여를 많이 받으면서 
50 번부서의 평균급여보다 많은 급여를 받는 직원의 이름, 급여, 부서명, 
부서id를 조회하시오.
select first_name, salary,department_name,department_id
from employees
where salary > (
        select min(salary)
        from employees
        where department_id = (
            select department_id
            from locations join departments using(location_id)
            where city = 'South San Francisco'))
and salary > ( select avg(salary)
        from employees
        where department_id = 50);


select first_name, salary,department_name,e.department_id
from employees e, departments d
where salary>(select avg(salary)
from employees
where department_id=50)
and salary >(select min(salary)
from employees
where department_id=(select department_id
from departments
where location_id= (select location_id
from locations
where city='South San Francisco')));


select *
from departments;


select *
from locations;

3. 각 직급별(job_title) 인원수를 조회하되 사용되지 않은 직급이 있다면 해당 직급도
출력결과에 포함시키시오. 그리고 직급별 인원수가 3명 이상인 직급만 출력결과에 포함시키시오.
select job_title, count(first_name)
from employees right outer join jobs using(job_id)
group by job_title
having count(*)>=3;


4. 각 부서별 최대급여를 받는 직원의 이름, 부서명, 급여를 조회하시오.
select first_name,department_name,salary,department_id
from employees join departments using(department_id)
where (department_id,salary)in(select department_id,max(salary)
from employees
group by department_id);

5. 직원의 이름, 부서id, 급여를 조회하시오. 그리고 직원이 속한 해당 부서의 
최소급여를 마지막에 포함시켜 출력 하시오.
select first_name,department_id, salary
from employees aa
where department_id=aa.department_id and salary in (select min(salary)
from employees);
--scala
select first_name, department_id, salary, (
select min(salary)
from employees
where department_id = emp.department_id)
from employees emp;
--inline view
select emp.first_name, emp.department_id, salary, emp2.minSal

from employees emp, (select department_id, min(salary) minSal

                     from employees
                     group by department_id) emp2
where emp.department_id = emp2.department_id;
==========================================
	Inline View 와 Top-N SubQuery
==========================================

1. 급여를 가장 많이 받는 상위 5명의 직원 정보를 조회하시오.

select *
from(
select rownum, first_name, salary
from employees
order by salary desc)
where rownum<=5;








select commission_pct
from employees
order by commission_pct desc;


2. 커미션을 가장 많이 받는 상위 3명의 직원 정보를 조회하시오.
select *
from(
select rownum, first_name, commission_pct
from employees
order by commission_pct desc nulls last)
where rownum<=3;

-- 연습문제
1. 월별 입사자 수를 조회하되, 입사자 수가 5명 이상인 월만 출력하시오.
select to_char(hire_date,'mm') 월, count(*)
from employees
group by to_char(hire_date,'mm') 
having count(*)>=5
order by 1;

--상위 10개만 조회
select *
from(
select to_char(hire_date,'mm') 월, count(*)
from employees
group by to_char(hire_date,'mm') 
order by 2 desc)
where rownum<=3;



2. 년도별 입사자 수를 조회하시오. 
단, 입사자수가 많은 년도부터 출력되도록 합니다.
select to_char(hire_date,'yyyy') 년, count(*)
from employees
group by to_char(hire_date,'yyyy') 
order by 2 desc;


--상위3개
select *
from(
select to_char(hire_date,'yyyy') 년, count(*)
from employees
group by to_char(hire_date,'yyyy') 
order by 2 desc)
where rownum<=3;

<< 연습문제 >>
1. 'Southlake'에서 근무하는 직원의 이름, 급여, 직책(job_title)을 조회하시오.
select *
from departments;

select *
from locations;

2. 국가별 근무 인원수를 조회하시오. 단, 인원수가 3명 이상인 국가정보만 출력되어야함.




3. 직원의 이름, 급여, 직원의 관리자 이름을 조회하시오. 단, 관리자가 없는 직원은
   '<관리자 없음>'이 출력되도록 해야 한다.



4. 직원의 이름, 부서명, 근무년수를 조회하되, 20년 이상 장기 근속자만 출력되록한다.



5. 각 부서 이름별로 최대급여와 최소급여를 조회하시오. 단, 최대/최소급여가 동일한
   부서는 출력결과에서 제외시킨다.



6. 자신이 속한 부서의 평균급여보다 많은 급여를 받는 직원정보만 조회하시오.
   단, 출력결과에 자신이 속한 부서의 평균 급여정보도 출력되어야한다. 



7. '월'별 최대급여자의 이름, 급여를 조회하시오.


8. 부서별, 직급별, 평균급여를 조회하시오. 
   단, 평균급여가 50번부서의 평균보다 많은 부서만 출력되어야 합니다.
select department_name, job_title,avg(salary)
from employees join departments using(department_id) join jobs using(job_id)     
group by department_name, job_title
having avg(salary) >(select avg(salary)
from employees
where department_id=50)
order by 1,2;


9. 자신의 관리자보다 많은 급여를 받는 직원의 이름과 급여를 조회하시오.
select *
from employees;

select first_name,salary
from employees e1
where salary>(select salary
from employees e2
where e1.manager_id=e2.employee_id);


10. 급여가 가장 많은 직원 6번째부터 10번째 직원만 출력하시오.

select *
from(
select rownum, first_name, salary
from employees
order by salary desc)
where rownum<=10;


select *
from
(select rownum rr, aa.*
from    (select first_name, salary
        from employees
        order by salary desc) aa
where rownum <=10
)
where rr>5

select *
from
(select rownum rr, aa.*
from    (select first_name, salary
        from employees
        order by salary desc) aa

)
where rr>5 and rr<=10


select *
from
(select rownum rr, aa.*
from    (select first_name, salary
        from employees
        order by salary desc) aa
where rownum <=10
)
where rr=6 or rr=10

///////scott1
-----------------sub query-----------------------------
-- 직원이름: smith
-- 목적: 부서이름을 알고싶다.

select ename,dname
from emp join dept using(deptno)
where ename='SMITH';

select dname
from dept
where deptno=?


select deptno
from emp
where ename ='SMITH';


select dname
from dept
where deptno=(select deptno
              from emp
              where ename ='SMITH');
              
              
---'SMITH' 직원과 같은 부서에 근무하는 직원을 알고싶다
select emp.*
from emp
where deptno=(select deptno
              from emp
              where ename ='SMITH');
              
select 동료.*
from emp 스미스, emp 동료
where 스미스.deptno=동료.deptno
and 스미스.ename='SMITH';
              
              
select 동료.*
from emp 스미스 join emp 동료
on( 스미스.deptno=동료.deptno)
where 스미스.ename='SMITH';

--SMITH와 동일한 직급을 가진  동료들----
select *
from emp
where job=(select job
from  emp
where ename='SMITH'
);

--SMITH와 급여와 같거나 큰 동료들---
select *
from emp
where sal >=(select sal
from emp
where ename='SMITH');

-- loc가 dallas인 사람의 정보 출력
select *
from dept;
select *
from emp;

select *
from emp
where deptno=(select deptno
from dept
where loc ='DALLAS');

select *
from emp join dept using(deptno)
where loc='DALLAS';

--직속 상관이 KING이 사원정보
select *
from emp
where mgr=(select empno
from emp
where ename='KING');



select *
from emp e1, emp e2
where e1.mgr=e2.empno and e2.ename='KING';
--영업 사원들보다 급여를 많이 받는 사원들의 이름과 급여와 직급(담당업무)를 출력하되 영업사원은 출력하지않는다
select *
from emp;
select *
from dept;



select *
from emp
where sal>=any(select sal
from emp
where JOB='SALESMAN')
and job <>'SALESMAN';


select ename ,sal,deptno
from emp
where sal>=all(select sal
from emp
where deptno =(select deptno
from dept
where dname='SALES'))
and deptno<>(select deptno
from dept
where dname='SALES');


--영업 사원들보다  최소급여보다 많이 받는 사원들의 이름과 급여와 직급(담당업무)를 출력하되 영업사원은 출력하지않는다

select *
from emp;

select *
from emp
where sal> any(select sal
from emp
where job='SALESMAN')
and job <>'SALESMAN';




