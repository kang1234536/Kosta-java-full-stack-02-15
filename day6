//class복습 및 상속 공부

package com.kosta.day06;

/**
 * 
 * @author KOSTA 강희원 document 주석 복습
 */
public class Car {
	// 1.멤버변수(field): non-static(instance변수),
	// static(class변수)
	private int speed; // 속도? 인스턴스변수!! private 정보은닉
	private boolean stop;// 멈췄는지?

	private static int count;// 자동차수.... class변수 //object 공유변수
//instance 변수	//private final int year; //final은 한번만 값을 세팅할수 있다... 값이 설정되고 변경은 불가능하다!.
//선언하자마자 초기화할수 있고 생성자에서 초기화할수있다.
	private final int year;
	private static final String COMPANY = "현대자동차"; // 상수!!
	// 2.생성자...new시에 자동호출되는 메서드

	public Car() {

		// year=2021;//final 변수 초기화 !!
		// instance변수는 자동초기화!!
		// speed=0, stop=false....
		// 생성자의 overloading사용시에 하나의 생성자가 다른 생성자를 호출시 사용!
		this(0, false, 2021);
	}

	public Car(int speed, boolean stop, int year) {
		super();
		// 매개변수와 멤버변수가 이름충돌시 구별하기위해 사용한다.
		this.speed = speed;
		this.stop = stop;
		this.year = year;
		count++;
		System.out.println(this.getClass().getSimpleName() + " 생성"); // 현재객체의 클래스를 얻어라 라는 함수 this.getClass()!!
		// 클래스의 이름을 얻으려면!! ==this.getClass().getSimpleName()
		// 3.일반메서드
		//대부분은 getter/setter를 만든다 private를 쓰기위해!!
		//getter/setter:외부에서 값을 읽거나 수정시 사용
		
	}

	public int getSpeed() {
		return speed;
	}

	public void setSpeed(int speed) {
		this.speed = speed;
	}

	public boolean isStop() {
		return stop;
	}

	public void setStop(boolean stop) {
		this.stop = stop;
	}

	public static int getCount() {
		return count;
	}

//	public static void setCount(int count) {
//		Car.count = count;
//	}
	//외부에서 접근못하게 바꿔보자
	private static void setCount(int count) {
	Car.count = count;
}	
	
//final 변수는 set할수 없다!!
	public int getYear() {
		return year;
	}
	//static method: 객체생성없이 호출가능
	public static String getCompany() {
		return COMPANY;
	}
	public void print() {
		System.out.println("-----Car정보------");
		System.out.println("speed : "+speed);
		System.out.println("stop : "+stop);
		System.out.println("year : "+year);
		System.out.println("count : "+count);
		System.out.println("company : "+COMPANY);
		
	}
	//4.instance block, static block
	{
		//위에는 instance block : instance 생성시마다 수행
		System.out.println("instance생성시 마다 수행된다.");
		System.out.println("***********************");
	}
	static {
		//static block 
		System.out.println("class가 load시에 수행된다");
		//load는 1번만 수행된다.
		System.out.println("####################");
	}
	//5.inner class: class안에 class!!!
	
	
	
	
	// class : object만드는 틀이다. template, 설계도
	/*
	 * 
	 * object: class를 이용해서 만든 독립된 개체이다
	 * 
	 * 
	 * 
	 */
}
//CarTest

package com.kosta.day06;

public class CarTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(Car.getCompany());
		System.out.println(Car.getCount());
		//Car.setCount(10); private로 바꾸면 접근불가능!!
		

		Car c1=new Car();
		//instance method호출
		
		System.out.println(c1.getSpeed());
		c1.print();
		
		
		Car c2= new Car(100, true, 2020);
		c2.print();
	}

}
//MEMBER
package com.kosta.day06;

//DTO(Data Tranfer Object)
//VO(Value Object)
public class Member {

	private String name;
	private String id;
	private String password;
	private int age;
	
	public Member(String name,String id){
		this(name, id, null,0);
	}

	public Member(String name, String id, String password, int age) {
		super();
		this.name = name;
		this.id = id;
		this.password = password;
		this.age = age;
	}

	@Override
	public String toString() {
		return "Member [name=" + name + ", id=" + id + ", password=" + password + ", age=" + age + "]";
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}
	
	
	
	
}
//MEMBER SERVICE
package com.kosta.day06;

//Service : business logic(업무로직)
public class MemberService {

	public Member login(Member member) {
		 
		if (member.getId().equals("hong") && 
				member.getPassword().equals("12345")) {
			member.setName("홍길동");
			member.setAge(20);
			return member;  //로그인성공, DB정보return 
		} else {
			return null;//로그인실패 
		}
	}

	public void logout(String id) {
		System.out.println(id + "님 로그아웃되었습니다.");

	}
}
//MEMBERSERVICE EXAMPLE
package com.kosta.day06;

//Application, App
public class MemberServiceExample {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		MemberService service = new MemberService();
		Member member=new Member(null,"hong","12345",0);
		member =service.login(member);
		if(member!=null) {
			System.out.println("로그인에 성공");
			System.out.println("로직수행......");
			service.logout(member.getName());
		}else {
		System.out.println("로그인에 실패");
		}
		}

}
/////Printer
package com.kosta.day06;

/**
 * 
 * @author KOSTA
 * method의 Overloading: 이름같고 매개변수 사양이 다르다
 */
public class Printer {

	public void println(int num) {
		System.out.println("int:"+num);
	}
	public void println(boolean num) {
		System.out.println("boolean:"+num);
	}
	public void println(double num) {
		System.out.println("double:"+num);
	}
	public void println(String num) {
		System.out.println("String:"+num);
	}
}

//PrinterTest
package com.kosta.day06;

public class PrinterExample {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Printer printer =new Printer();
		
		printer.println(0);
		printer.println("FALSE");
		printer.println(3.14);
		printer.println("자바");
	}

}
//싱글톤 ShopService
package com.kosta.day06;

//싱글톤.... 한번만 생성하겠다.
//서버 만들 때 사용 jsp/servlet 할때 사용
//JSP/Servlet: 서버에서 실행되는 자바프로그램
//Servlet - 싱글톤으로 사용된다.
public class ShopService {
	static ShopService shopService;

	public static ShopService getInstance() {
		if (shopService == null)
			shopService = new ShopService();
		return shopService;
	}

}
//ShopServiceExample
package com.kosta.day06;

public class ShopServiceExample {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ShopService service1 = ShopService.getInstance();
		ShopService service2 = ShopService.getInstance();
	
	if(service1 == service2) {
		System.out.println("같은객체이다.");
	}
	else {
		System.out.println("다른객체이다.");
	}
	}

}

//19번문제
package com.kosta.day06;



//19번문제
public class Account {
	private int balance;//잔고
	static final int MIN_BALANCE=0;
	static final int MAX_BALANCE=1000000;
	public int getBalance() {
		return balance;
	}
	public void setBalance(int balance) {
		if(balance>=MIN_BALANCE && balance<=MAX_BALANCE)
			this.balance=balance;
		
//		if(balance<MIN_BALANCE || balance>MAX_BALANCE)
//			return; //생략가능
//			this.balance+=0;
//		else {
//			this.balance = balance;
//
//		}

	}
	
	



}

package com.kosta.day06;

public class AccountExample {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Account account =new Account();
		account.setBalance(10000);
		System.out.println("현재잔고 :"+account.getBalance());
		account.setBalance(-100);
		System.out.println("현재잔고 :"+account.getBalance());
		account.setBalance(2000000);
		System.out.println("현재잔고 :"+account.getBalance());
		account.setBalance(300000);
		System.out.println("현재잔고 :"+account.getBalance());
	}

}
//20번문제
//MVC로 프로그램만들기

//ACCOUNTDTO->VIEW->SERVICE->controller 순서로작성

package com.kosta.day06.lab20;

//DTO(DATA Transfer Object)
public class AccountDTO {
	//멤버변수
	private String ano;
	private String owner;
	private int balance;
	//2.생성자메서드
	public AccountDTO(String ano, String owner, int balance) {
		super();
		this.ano = ano;
		this.owner = owner;
		this.balance = balance;
	}
	//일반메서드  
	//getter/setter 메서드
	public String getAno() {
		return ano;
	}
	public void setAno(String ano) {
		this.ano = ano;
	}
	public String getOwner() {
		return owner;
	}
	public void setOwner(String owner) {
		this.owner = owner;
	}
	public int getBalance() {
		return balance;
	}
	public void setBalance(int balance) {
		this.balance = balance;
	}
	//toString()!! 만들어놓으면 좋음
	@Override
	public String toString() {
		return "Account [ano=" + ano + ", owner=" + owner + ", balance=" + balance + "]";
	}
	
	
	
}
package com.kosta.day06.lab20;

import com.kosta.day06.Account;

/**
 * 
 * @author KOSTA
 *  Account정보 display한다.
 */
public class AccountView {
	public static void print(AccountDTO account) {
		System.out.println("=====계좌정보 출력======");
		System.out.println(account);
	}

	public static void print(AccountDTO[] accounts) {
		System.out.println("=====계좌정보 여러건 출력======");
		for (AccountDTO acc : accounts) {
			if(acc==null)
				break;
			System.out.println(acc);
		}

	}
	public static void print(String message) {
		System.out.println(message);

	}
}
package com.kosta.day06.lab20;

//Service : 업무로직 작성!!
public class AccountService {
	// 배열 생성 //변수생성!!
	static final int MAX_LENGTH=10; //상수!!
	AccountDTO[] accountList = new AccountDTO[MAX_LENGTH];
	static int count; // 계좌의수 계좌들이 공유하는 변수이므로 static을 써야한다.

	// 계좌생성
	public void CreateAccount(String ano, String owner, int balance) {
		if(count>=MAX_LENGTH) {
			System.out.println("더 이상 계좌생성 불가");
			return;
			}
		accountList[count] = new AccountDTO(ano, owner, balance);
		count++;
	}
	// 계좌목록
	public void AccountListDisplay() {
		AccountView.print(accountList);
	}
	// 예금
	public void Deposit(int index,int amount) {
		if(accountList[index]==null) {
			AccountView.print("존재하지않는 계좌이다. 예금불가");
			return;//함수빠지기
		}
		int a=accountList[index].getBalance()+amount;
		accountList[index].setBalance(a);
	}
	// 출금
	public int Withdraw(int index,int amount) {
		if(accountList[index]==null) {
			AccountView.print("존재하지않는 계좌이다. 출금불가");
			return 0; //함수빠지기
		}
		int a=accountList[index].getBalance()-amount;
		if(a<0) {
			AccountView.print("잔고부족 출금불가");
			return 0;
		}
		accountList[index].setBalance(a);
		return amount;
	}
	
	//계좌찾기
	AccountDTO FindAccount(String ano) {
		for(AccountDTO acc :accountList) {
			if(acc.getAno().equals(ano))
				return acc;
		}
		return null;
	}
	
	
	
	
	
	
}
package com.kosta.day06.lab20;

import java.util.Scanner;

/**
 * 
 * @author KOSTA controller: 사용자의 요청을 받아서 service에 전달한다. service결과를 받아서 사용자에게
 *         응답한다.
 */
public class AccountContoller {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		boolean run = true;
		AccountService service=new AccountService();
		while (run) {
			System.out.println("-------------------");
			System.out.println("1.계좌생성");
			System.out.println("2.계좌목록 조회");
			System.out.println("3.예금");
			System.out.println("4.출금");
			System.out.println("5.종료");
			System.out.println("-------------------");
			System.out.print("작업선택>>");
			int key = sc.nextInt();
			switch (key) {
			case 1:
				System.out.print("계좌번호 예금주 잔고 >>");
				service.CreateAccount(sc.next(),sc.next(), sc.nextInt());
				System.out.println("계좌가 생성되었습니다.");
				break;

			case 2:
				service.AccountListDisplay();
				
				break;
			case 3:{ //case에 {} (블럭을) 만들면 지역변수를 사용할수있다.
				System.out.print("입금할 계좌번호와 금액>>");
				int idx =sc.nextInt();
				int amount =sc.nextInt();
				
				
				service.Deposit(idx,amount);
				break;
				}
			case 4:{
				System.out.print("출금할 계좌번호와 금액>>");
				int idx =sc.nextInt();
				int amount =sc.nextInt();
				
				
				//service.Withdraw(idx,amount);
				amount =service.Withdraw(idx, amount);
				AccountView.print(amount+"출금");
				break;
				}
			default:
				System.out.println("작업이 종료되었습니다.");
				run = false;
				break;
			}
		}

		sc.close();
	}

}
//////7장 상속
package com.kosta.day06.inherit;

public class Account {
	private	String accNo;//계좌번호
	private String ownerName;//계좌주인이름
	private int balance; //잔액
	//생성자

	public Account() {
		
	}
	
	public Account(String accNo, String ownerName, int balance) {
		super();
		this.accNo = accNo;
		this.ownerName = ownerName;
		this.balance = balance;
	}
	
	//입금기능
		public void deposit(int amount) {
			balance += amount;
		}
	//출금기능
	public int withdraw(int amount) {
		if(amount>balance) {
			System.out.println("잔액부족합니다");
			return 0;
		}
		balance -=amount;
		return amount;
	}

	@Override
	public String toString() {
		return "Account [accNo=" + accNo + ", ownerName=" + ownerName + ", balance=" + balance +   "]";
	}

	
	
}

package com.kosta.day06.inherit;

public class CheckingAccount extends Account {
	String cardNo; // 카드번호

	CheckingAccount(String accNo,String ownerName,int balance,String cardNo) {
		// 1)부모의 default생성자를 정의한다.
		//super();
		// 2).명시적으로 부모의 생성자를 호출한다
		super(accNo,ownerName,balance);
		
		this.cardNo=cardNo;
	}

	public int pay(String cardNo, int amount) {
		if (this.cardNo.equals(cardNo)) {
			return withdraw(amount);
		} else {
			System.out.println("카드번호 오류");
			return 0;
		}
	}

}
package com.kosta.day06.inherit;

public class AccountTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		method1();
		method2();
		
	}

	private static void method2() {
		// TODO Auto-generated method stub
		CheckingAccount account = new CheckingAccount("112-1888","kim",1000,"7878");
		account.deposit(2000);
		System.out.println(account.withdraw(500)+"출금");
		System.out.println(account);
		
		System.out.println(account.pay("7878",600)+"출금");
		System.out.println(account);
	}

	private static void method1() {
		// TODO Auto-generated method stub
		Account account = new Account("112-1888","kim",1000);
		account.deposit(2000);
		System.out.println(account.withdraw(500)+"출금");
		System.out.println(account);
	}

}
package com.kosta.day06.inherit;

public class Person {
	private String name;
	private int age;
	private String phone;
	public Person() {
		
	}
	public Person(String name, int age, String phone) {
		super();
		this.name = name;
		this.age = age;
		this.phone = phone;
	}
	void exercise() {
		System.out.println(name+"은 운동을 한다.");
	}
	void eatting() {
		System.out.println(name+"은 밥을 먹는다");
	}
	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + ", phone=" + phone + "]";
	}
	
}
package com.kosta.day06.inherit;



public class Student extends Person {
	String stuNo;
	String major;
	
	public Student(String name,int age, String phone,String stuNo, String major) {
		super(name,age,phone);
		this.stuNo = stuNo;
		this.major = major;
	}
	void study() {
		System.out.println("공부를한다");
	}
	void exam() {
		
		System.out.println(stuNo+"의 "+"시험을본다");
	}
	@Override
	public String toString() {
		return "Student [stuNo=" + stuNo + ", major=" + major + "]";
	}
	
	
}
package com.kosta.day06.inherit;

public class TEST {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		method1();
		method2();
	}

	private static void method2() {
		// TODO Auto-generated method stub
		Student s = new Student("김길동",20,"010-1111-2222", "123", "컴공");
		s.exam();
		s.study();
		System.out.println(s);
	}

	private static void method1() {
		// TODO Auto-generated method stub
		Person p = new Person("김길동",20,"010-1111-2222");
		p.eatting();
		p.exercise();
		System.out.println(p);
	
	
	
	}

}





