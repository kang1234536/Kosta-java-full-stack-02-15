//3월18일 jdbc 공부
--3월 18일  -- 9시 수업
--DDL(DATA Definition Language) : 데이터 정의어 : CREATE, ALTER,DROP,RENAME
--DML(DATA Manipulation Language): 데이터조작어: INSERT,DELETE,UPDATE, MARGE
--DQL(DATA Query Language):SELECT

drop table member;
-- table 제약조건 : not null, primary key, unique,check,foreign key

drop table board;
=====================================
7.
다음 조건을 만족하는 테이블 생성 DDL을 작성하십시오. 

테이블 명 : board

테이블에 대한 이해 : 게시판 정보를 가지는 테이블

칼럼명: 
board_seq	    (게시물 번호) 정수 최대 10자리,
board_title	    (게시물 제목) 문자 가변 자릿수 255자리,
board_contents   (게시물 내용) 문자 가변 자릿수 4000자리
board_writer     (게시물 작성자) 문자 가변 자릿수 100자리,
board_date       (게시물 작성시간) 날짜,	
board_viewcount  (게시물 조회수) 정수 최대 6자리,
board_password   (게시물 암호) 문자 가변 자릿수 20자리,	

제약조건 :  board_seq : 기본 키(Primary Key)  제약 조건명은 BOARD_SEQ_PK
 board_title :  값이 반드시 존재(NOT NULL) 
 board_writer : Member 테이블의 member_id 컬럼 참조

(Member  테이블
member_id 문자 가변 자릿수 100자리
           primary key 라고 가정합니다)
        
--문제와 상관없이 강사님이 교육용으로 만든 board, Member 테이블        
           
create table board(
board_seq	    number(10) constraint board_BOARD_SEQ_PK  primary key,
board_title	   varchar2(255) not null,
board_contents  varchar2(4000),
board_writer    varchar2(100) constraint board_board_writer_fk  references Member(member_id),
board_date       date default sysdate,
board_viewcount  number(6) constraint board_board_viewcount_check check (board_viewcount>0),
board_password  varchar2(20),
board_image varchar2(100) constraint board_board_image_unique unique
);	

create table Member(
member_id varchar2(100)constraint Member_member_id_pk primary key,
member_name varchar2(20) not null
);



desc Member;
select * from board;
desc board;

insert into board(board_seq,board_title) values(1,'목요일');
insert into board(board_seq,board_title,board_contents) values(2,'aa','날씨가 좋아요');
insert into board(board_seq,board_title,board_contents,board_writer) values(3,'aa','날씨가 좋아요',100);  -- Member 테이블에 member_id값이 없어서 절대만들수없다
insert into Member values(100,'강성빈'); -- member_id 를 넣고나서
insert into board(board_seq,board_title,board_contents,board_writer) values(3,'aa','날씨가 좋아요',100); -- 가능
select * from board;
select * from Member;
insert into board(board_seq,board_title,board_contents,board_writer,board_date) values(4,'aa','날씨가 좋아요',100,'2020-12-31'); -- 
insert into board(board_seq,board_title,board_contents,board_writer,board_date,board_viewcount) values(5,'aa','날씨가 좋아요',100,'2020-12-31',-1);   -- 제약조건 check 가 0 보다 커야되서 절대안된다
insert into board(board_seq,board_title,board_contents,board_writer,board_date,board_viewcount) values(5,'aa','날씨가 좋아요',100,'2020-12-31',1);  -- 가능
insert into board(board_seq,board_title,board_contents,board_writer,board_date,board_viewcount,board_password) values(6,'aa','날씨가 좋아요',100,'2020-12-31',1,'1234'); 
insert into board values(7,'aa','날씨가 좋아요',100,'2020-12-31',1,'1234','images/logo.png');
insert into board values(8,'aa','날씨가 좋아요',100,'2020-12-31',1,'1234','images/logo.png');  --  unique 제약조건에 걸려서 불가능
insert into board values(8,'aa','날씨가 좋아요',100,'2020-12-31',1,'1234','images/logo2.png');  
select * from board;
select * from Member;

select * from user_constraints;  -- hr에서 사용되는 모든 테이블의 칼럼 확인가능

select * 
from user_constraints
where table_name ='BOARD'; 

select * 
from user_cons_columns
where table_name ='BOARD'; 

select *
from user_constraints join user_cons_columns using(constraint_name)
where user_constraints.table_name ='BOARD'; 

--DML
INSERT INTO 테이블(칼럼리스트) VALUES(값리스트);

UPDATE 테이블이름
SET 칼럼 = 값,칼럼 = 값,칼럼 = 값,칼럼 = 값 
WHERE 조건문;

DELETE FROM 테이블이름
WHERE 조건문;


--eclipse 버전 update 만들기
desc employees;

update employees
 set
 FIRST_NAME=?,             
 LAST_NAME=?,     
 EMAIL=?,          
 PHONE_NUMBER=?,          
 HIRE_DATE=?,     
 JOB_ID=?,         
 SALARY=?,                  
 COMMISSION_PCT=?,       
 MANAGER_ID=?,            
 DEPARTMENT_ID=?          
 where employee_id=?
 //10시 수업 
 // 3월18일
		// 수정테스트
		method10();
		// 3월18일
		// 삭제테스트
		//method11();
 
 
 	private static void method11() {
		// 3월 18일 삭제 메서드
		EmpDAO2 dao = new EmpDAO2();
		
		int result = dao.DeleteEmp(77);
		EmpView.display(result > 0 ? "삭제성공" : "삭제실패");
	}

	private static void method10() {
		// 3월 18일 수정 메서드
		EmpDAO2 dao = new EmpDAO2();
		EmpVO emp = makeEmp();
		int result = dao.updateEmp(emp);
		EmpView.display(result > 0 ? "수정성공" : "수정실패");
	}
	private static EmpVO makeEmp() {
		EmpVO emp = new EmpVO(); // 너무많으므로 default를 만든다
		// new EmpVo("11개")넣는것보다 ->이렇게 하나하나 직접넣는게 best
		emp.setCommission_pct(0.4);
		emp.setDepartment_id(10);
		emp.setEmail("kha02013322@naver.com");
		emp.setEmployee_id(77);
		emp.setFirst_name("강77_수정4");
		emp.setHire_date(new Date(new java.util.Date().getTime()));
		emp.setJob_id("IT_PROG");
		emp.setLast_name("희원_수정4");
		emp.setManager_id(120);
		emp.setPhone_number("010-4111-3333");
		emp.setSalary(4300);
		return emp;
	}


// 3월 18일 DELETE 내용
	// 사용자가 웹을 통해서 삭제 =>Controller->DAO=>DB
	public int DeleteEmp(int empid) {
		Connection conn;
		PreparedStatement st = null;
		int result = 0;
		String sql ="delete from employees where employee_id=? ";
		conn = DBUtil.getConnection();
		try {
			st = conn.prepareStatement(sql);
			st.setInt(1, empid);
			result = st.executeUpdate(); // insert/update/delete는 executeUpdate()를 써야한다.
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			DBUtil.dbClose(null, st, conn);
		}
		
		
		return result;
	}
	
	
	// 3월 18일 UPDATE 내용
	// 사용자가 웹을 통해서 개인정보수정 본래정보가 보인다. =>Controller->DAO=>DB
	public int updateEmp(EmpVO emp) {
		Connection conn;
		PreparedStatement st = null;
		int result = 0;
		String sql = "update employees set "
				+    " FIRST_NAME=?, "
				+    " LAST_NAME=?, "
				+    " EMAIL=?, "
				+    " PHONE_NUMBER=?, "
				+ 	 " HIRE_DATE=?, "
				+    " JOB_ID=?, "
				+    " SALARY=?, "
				+    " COMMISSION_PCT=?, "
				+    " MANAGER_ID=?, "
				+    " DEPARTMENT_ID=? "
				+    " where employee_id=? ";
		conn = DBUtil.getConnection();
		try {
			st = conn.prepareStatement(sql);
			st.setInt(11, emp.getEmployee_id());
			st.setString(1, emp.getFirst_name());
			st.setString(2, emp.getLast_name());
			st.setString(3, emp.getEmail());
			st.setString(4, emp.getPhone_number());
			st.setDate(5, emp.getHire_date());
			st.setString(6, emp.getJob_id());
			st.setInt(7, emp.getSalary());
			st.setDouble(8, emp.getCommission_pct());
			st.setInt(9, emp.getManager_id());
			st.setInt(10, emp.getDepartment_id());
			result = st.executeUpdate(); // insert/update/delete는 executeUpdate()를 써야한다.
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			DBUtil.dbClose(null, st, conn);
		}
		return result;

	}
--- view 공부
 --view : sql문을 간단히 하고자 하는경우 사용, 보안때문에 사용
 create table emp_backup
as
select *
from employees;

select * from emp_backup;

create view emp_backup_view
as
select * from emp_backup
where department_id=60;

create or replace view emp_backup_view
as
select * from emp_backup
where department_id=60;

select * from emp_backup_view;

--11시 수업
--user가 만든 뷰 목록들
select * from user_views;


--11시수업 --뷰: 테이블을 보기위한 창의 역할
create or replace view emp_backup_view2
as
select employee_id, first_name, salary from emp_backup
where department_id=60;

select * from emp_backup_view2;

select *
from emp_backup_view2
where salary >5000;

update emp_backup_view2
set salary =10000
where salary>5000;

select * from emp_backup_view2;
--view를 통해서 테이블값도 변경가능
select * from emp_backup;



create or replace view emp_backup_view3 (직원번호,직원이름,급여)
as
select employee_id, first_name,salary
from emp_backup
where department_id =60;


select * from emp_backup_view3;

select * from emp_backup_view3
where 급여>=5000;

update emp_backup_view3
set 급여 =20000
where 급여>=5000;

select *
from emp_backup;

select department_id, avg(salary)
from emp_backup
group by department_id

create or replace view emp_backup_view_groupby
as
select department_id, avg(salary) sal_avg
from emp_backup
group by department_id;


select * from emp_backup_view_groupby;

select *
from emp_backup_view_groupby join departments using(department_id);

--group by 사용한 view는 DML불가
update emp_backup_view_groupby
set sal_avg=sal_avg*1.1;


--FORCE? --> 테이블이 있던지 없던지 만들어라!!  컴파일오류와 함께 만들어짐
create or replace FORCE view  emp_backup_view_groupby2
as
select department_id, avg(salary) sal_avg
from emp_backup2
group by department_id;


--테이블이 없는 뷰를 만들어서 오류
SELECT * FROM emp_backup_view_groupby2;



CREATE  TABLE emp_backup2
as
select *
from employees;
--테이블이 존재할떄
create or replace FORCE view  emp_backup_view_groupby2
as
select department_id, avg(salary) sal_avg
from emp_backup2
group by department_id;

SELECT * FROM emp_backup_view_groupby2;


--with check option  테이블에 영향x
create or replace view emp_backup_60
as
select *
from emp_backup
where department_id=60;

select *
from emp_backup_60;


update emp_backup_60
set department_id=30;
--목적이 부서가 60인데 30으로 바껴서 나오질 않는다!!
select *
from emp_backup_60;

select *
from emp_backup
where department_id=30;


create or replace view emp_backup_30
as
select *
from emp_backup
where department_id=30 with check option;

-- 바꾸는거 방지!!
update emp_backup_30
set department_id=60;

-- 다른부분은 바꾸기 가능
update emp_backup_30
set salary=10000;

select * from emp_backup_30;


--12시 수업 with read only
create or replace view emp_backup_30
as
select *
from emp_backup
where department_id=30 with read only ;

--수정불가
update emp_backup_30
set department_id=30;


--자신의 부서의 평균보다 더 적은 급여를 받고 있는 직원을 조회
Create or replace view emp_dept_avg
as
select department_id, avg(salary) sal_avg
from employees
group by department_id;

select first_name,salary,round(sal_avg)
from employees join emp_dept_avg using(department_id)
where salary<sal_avg;


--inline view 이용

select first_name,salary,round(aa.sal_avg)
from employees join (select department_id, avg(salary) sal_avg
from employees
group by department_id) aa
using(department_id)
where salary<aa.sal_avg;

--LABS 해설
1. 
2007년 입사한(hire_date) 직원들의 사번(employee_id), 이름(first_name), 
성(last_name), 부서명(department_name)을 조회하려 합니다.
임시 테이블 용도로 사용하는 Object를 생성합니다.
==>emp_2007_details

이때, 부서에 배치되지 않은 직원의 경우, '<NOT ASSIGNED>'로 보여줍니다.





create or replace view emp_2007_details
as
select employee_id,first_name,last_name,nvl(department_name,'<NOT ASSIGNED>') 부서
from employees join departments using(department_id)
where to_char(hire_date,'yyyy')='2007';

select *
from emp_2007_details;


2.
기존 EMPLOYEES 테이블에 있는 레코드들 중, 'Marketing'부서에 근무하는 직원 레코드를
  이용하여 EMPLOYEES_MARKETING 테이블을   만들기 위한 DDL을 작성하십시오. 
  단, EMPLOYEES_MARKETING 테이블의 키는   없어도 관계없습니다.


create table EMPLOYEES_MARKETING
as
select *
from employees
where department_id =(select department_id 
from departments
where department_name='Marketing');

desc EMPLOYEES_MARKETING;
-- not null 을 제외한 제약조건은 복사되지 않는다
insert into EMPLOYEES_MARKETING(EMPLOYEE_ID,LAST_NAME,EMAIL,HIRE_DATE,JOB_ID) values(201,'aa','PFAY',sysdate,'aa');


select * from EMPLOYEES_MARKETING;


select * from user_constraints
where table_name ='EMPLOYEES_MARKETING';



3.
인사관리를 위하여 현재 직원정보에 대한 백업테이블을 생성하여 보관하기로 합니다. 
새로 생성하는 백업테이블명은 "EMPLOYEES_BACKUP" 이며 기존테이블(EMPLOYEES)의 Index, 
Constraint는 필요로 하지 않습니다. 단 급여(Salary)가 5000을 초과하는 직원만 백업테이블 내에 존재해야 합니다.
위 설명에 해당하는 테이블을 생성하기 위한 sql 스크립트를 작성하시오.

create table EMPLOYEES_BACKUP
as
select *
from employees
where salary>5000;

select *
from EMPLOYEES_BACKUP;


create or replace view EMPLOYEES_BACKUP1
as
select *
from employees
where salary>5000;


4.
인사관리를 위한 시스템 구축중 지역(Regions), 국가(Countries), 
위치(Locations)에 대한 전체 리스트 정보를 빈번하게 사용할 경우가 생겼다. 
여러 프로그램에서 매번 반복적으로 사용되며 일부 개발자의 경우 잘못된 
조인으로 올바른 결과를 가져오지 못하는 경우가 발생하였다. 
이를 해결하기 위해 복잡한 질의를 숨기기 위한 논리적 테이블의 용도로 
쓰이는 DB Object 를 생성하기로 하였다. 
DB Object 이름은 LOC_DETAILS_{DB OBJECT명} 을 사용한다.
위 설명에 해당하는 DB Object를 생성하기 위한 sql 스크립트를 작성하라.



create or replace view LOC_DETAILS_view
as
select city,country_name,region_name
from regions join countries using(region_id) join locations using(country_id)

select * from LOC_DETAILS_view;




5.
사원이 한 명 이상인 부서들에 대해 부서 번호, 부서 이름, 사원 수, 
최고 급여, 최저 급여, 평균 급여, 급여 총액을 빈번하게 조회하여야 
할 필요가 있어, VIEW를 생성하여 사용하고자 합니다. 
생성된 DB Object(VIEW)의 전체 레코드에 대한 조회 결과가 아래와 같이 출력되도록 
"DEPT_SAL_INFO"라는 VIEW 를 생성하는 sql 스크립트를 작성하십시오. 
단, 평균 급여의 소수점 이하는 절사합니다.

출력 : DEPT_ID | DEPT_NAME | NUM_EMP | MAX_SAL | MIN_SAL | AVG_SAL | SUM _SAL


create or replace view DEPT_SAL_INFO
as
select department_id DEPT_ID,departments.department_name DEPT_NAME,count(*) NUM_EMP, max(salary) MAX_SAL,min(salary) MIN_SAL, trunc(avg(salary)) AVG_SAL,sum(salary) SUM_SAL
from employees join departments using(department_id)
group by department_id,departments.department_name
having count(*)>1;


select * from DEPT_SAL_INFO;


6.
Sales 부서에서 Gerald Cambrault 라는 관리자(Manager_id)를 가지는 
직원의 정보를 조회하여 employee_sales_Gerald 라는 view를 생성하십시오.

사원번호  |  사원명  |  부서명  |  관리자명

create view  employee_sales_Gerald
as
select 사원.employee_id 사원번호, 사원.first_name||' '||사원.last_name 사원명, 부서.department_name 부서명, 관리자.first_name||' '||관리자.last_name 관리자명
from employees 사원, employees 관리자, departments 부서
where 사원.manager_id=관리자.employee_id
and 부서.department_id= 사원.department_id
and 부서.department_name='Sales'
and 사원.manager_id= (select employee_id from employees where first_name||' '||last_name= 'Gerald Cambrault');


//2시수업
====================================

8.locations 테이블에서 2000번 이상의 도시코드, 도시명, 국가명, 그 도시에 있는
 부서명을 조회하여 citycode_gt_2000 라는 이름의 view를  생성하는 SQL 문장을 작성하시오.
단, citycode_gt_2000 view는 변경 가능하도록 생성합니다.

LOCATION_ID	  CITY	  COUNTRY_NAME	  DEPARTMENT_NAME

create or replace view citycode_gt_2000 (LOCATION_ID, CITY, COUNTRY_NAME, DEPARTMENT_NAME)
as
select location_id, city, country_name, department_name
from locations join departments using(location_id)
                join countries using(country_id)
where location_id >= 2000;

select * from citycode_gt_2000;



--- 시퀀스 SEQUENCE: 자동 번호 발생기,table과 무관하다. 즉, 여러 테이블이 공유 가능

select * from board;

create sequence board_no_sequence
start with 100
cache 10
;


select board_no_sequence.nextval
from dual;

drop sequence board_no_sequence;


select board_no_sequence.currval
from dual;

desc board;

insert into board(BOARD_SEQ,BOARD_TITLE)
values(board_no_sequence.nextval,'게시타이틀');

select *
from board;

--MySQL: auto increment 자동으로 증가한다.
--create table board2(board_seq number auto increment,
--oracle은 sequence를 사용한다.

--인덱스
--index: oracle이 primary key, unique로 설정된 칼럼인 경우 자동으로 index생성해준다.
--index 추가 가능하다
-- 성능향상을 위해서, 조회속도 높이기 위해, DML 작업이 많은경우 성능 저하 초래... 적절하게 만들어야한다.
select *
from user_ind_columns
where table_name in ('EMPLOYEES','DEPARTMENTS','BOARD');

select *
from employees
where employee_id/10 =10;


select *
from employees
where substr(email,1,5) = 'SKING';

select *
from employees
where substr(email,1,5) = 'SKING';


create index board_title_idx
on board(board_title);

select *
from board
where board_title='aa';



select *
from board
where board_seq=8;


----3시수업
----3시수업
grant // revoke



SQL> conn system/gmldnjsal12
Connected.
SQL> create user user1
  2  identified by 1234;
SQL> conn system/gmldnjsal12
Connected.
SQL> grant select on emp to user1;
SQL> conn user1/1234
Connected.
SQL> select * from scott.emp;
SQL> conn SCOTT/TIGER
Connected.
SQL> revoke select on emp from user1;
SQL> conn user01/1234
Connected.
SQL> select * from SCOTT.emp;
select * from SCOTT.emp
                    *
ERROR at line 1:
ORA-00942: table or view does not exist

--connect resource 롤 총 13가지 왠만한 기능을 다 넣어준다

SQL> conn system/gmldnjsal12
Connected.
SQL> create user user04
  2  identified by 1234;

User created.

SQL> grant CONNECT, RESOURCE TO user04;

Grant succeeded.

SQL> conn user04/1234;
Connected.
SQL> create table aa(id number);

Table created.

SQL> select * from aa;

no rows selected

SQL> insert into aa values(10);

1 row created.

SQL> select * from aa;

        ID
----------
        10
----4시수업 동의어  synonym
SQL> conn system/gmldnjsal12
Connected.
SQL> create user user05
  2  identified by 1234;

User created.

SQL> grant connect,resource to user05;

Grant succeeded.

SQL> grant create synonym to user05;

Grant succeeded.
	
SQL> conn SCOTT/TIGER
Connected.
SQL> GRANT SELECT ON EMP TO USER05;

Grant succeeded.

SQL> conn user05/1234
Connected.
SQL> select * from SCOTT.EMP;


SQL> create synonym semp for SCOTT.emp;

Synonym created.

SQL> select * from semp;

------
SQL> conn system/gmldnjsal12
Connected.
SQL> create table adminTBL(id number);

Table created.

SQL> grant select on adminTBL to SCOTT;

Grant succeeded.

SQL> conn SCOTT/TIGER
Connected.
SQL> select * from system.adminTBL;

no rows selected


--공개 동의어
SQL> conn system/gmldnjsal12
Connected.
SQL> create public synonym pubTBL for system.adminTBL;
Synonym created.
SQL> conn SCOTT/TIGER
Connected.
SQL> select * from pubTBL;

no rows selecte
////eclipse  가기!!








 
 
 
