//3월 17일 DDL 공부
--테이블 만들기
create table 테이블이름(
변수이름 변수타입,
변수이름 변수타입);


create table customer (
 cust_id number,
 cust_name varchar2(20),
 gender char(1),
 gender2 char(10),
 birthday date,
 year01 interval year(3) to month,
 day01 interval day(3) to second
);

--테이블 삭제하기
drop table 테이블이름;

drop table customer;

--테이블 조회하기
desc customer;
select * from customer;
--테이블에 값넣기
insert into 테이블이름 values( 값들넣기);

insert into customer values(1,'홍길동','M','남자',sysdate,interval '36' month(3), interval '100' day(3));
insert into customer values(2,'홍길동2','F','여자',sysdate,interval '36' month(3), interval '100' day(3));
insert into customer values(3,'홍길동3','M','남자',sysdate,interval '36' month(3), interval '100' day(3));
insert into customer values(4,'홍길동4   ','M','여자',sysdate,interval '36' month(3), interval '100' day(3));  -- 공백넣기
insert into customer values(5,'홍길동5   ','M','남자  ',sysdate,interval '36' month(3), interval '100' day(3)); 
insert into customer values(6,'홍길동6','M','남자  ',sysdate,interval '36' month(3), interval '100' day(3)); 
--데이터 조회
select *
from customer
where cust_id=1;
--char:고정길이 varchar2: 가변길이
select *
from customer
where cust_name='홍길동';

select *
from customer
where trim(cust_name)='홍길동4';  --공백 없애기 trim()


select *
from customer
where gender='M';

select *
from customer
where gender2='남자 ';


select cust_name,birthday,birthday+year01 "36개월후",birthday+day01 "100일후"
from customer;

-- 2번쨰 테이블
create table emp2(
empid number(3),
empname varchar2(20),
salary number(9,2));

insert into emp2 values(1,'김길동',1000000.12);
insert into emp2 values(2,'김길동12345678',1000000.12);

--insert into emp2 values(3,'김길동33',100000000.12);--value larger than specified precision allowed for this column 너무크다 범위를 넘어섬!!


select *
from emp2;


--백업하기
create table emp3
as 
select *
from employees;


create table emp4
as 
select *
from employees
where department_id=80;

-- 구조는 복사하고 데이터는 가져오지 않음
create table emp5
as 
select *
from employees
where 1=0;

create table emp6
as 
select employee_id,first_name,salary,hire_date
from employees
where 1=0;



--백업 조회하기
select  *
from emp3;

select  *
from emp4;

select *
from emp5;

select *
from emp6;


--테이블 구조 변경
--alter table 테이블이름 add() ,modify(),drop()
alter table emp6
add (deptid number, address varchar2(100));

desc emp6;

alter table emp6
modify(deptid number(3), address varchar2(50));

desc emp6;

alter table emp6
drop(deptid,address);

desc emp6;

alter table emp6
add (deptid number, address varchar2(100));

desc emp6;

--truncate 사용 : 데이터만삭제 구조는 그대로
select *
from emp4;

truncate table emp4;

select *
from emp4;
 -- rename  테이블 명 변경
 --rename 이전이름 to 새로운이름
rename emp4 to empp;

select * from empp;

rename empp to emp4;

select *
from user_tables;


select *
from all_tables;


select *
from dba_tables;


--DML!!
create table customer2 (
 cust_id number,
 cust_name varchar2(20),
 gender char(1),
 gender2 char(10),
 birthday date
 );
desc customer2;

insert into customer2 values(1,'aa','M','남자',sysdate);
insert into customer2(cust_id,cust_name,gender,gender2) values(2,'aa','M','남자');
insert into customer2(cust_id,cust_name) values(3,'aa');
--insert into customer2(cust_name,cust_id) values(3,'aa'); 타입하고 값이 다르다 ->오류
insert into customer2(cust_name,cust_id) values('aa',4);
insert into customer2 values(5,'aa',null,null,null); --명시적으로 null값을 준다.
insert into customer2 values(6,'aa','','',null); --명시적으로 null값을 준다. '' 값도 null값으로 들어간다
insert into customer2 values(7,'aa','','',''); --명시적으로 null값을 준다.
insert into customer2 values('','aa','','',''); --명시적으로 null값을 준다.
--입력되지않은 칼럼은 암시적으로 null 값이다.
select * from customer2;

select * from customer2
where gender is null;

delete from customer2
where  cust_id is null;



create table emp_backup
as
select employee_id,first_name,salary,hire_date
from employees
where department_id=10;

desc emp_backup;

select*
from emp_backup;
--데이터 훔쳐오기
insert into emp_backup
select  employee_id,first_name,salary,hire_date
from employees
where department_id=100;

insert into emp_backup
select  employee_id,first_name,salary,hire_date
from employees
where department_id=10;



insert into emp_backup
select  location_id,department_name,0,sysdate
from departments
where department_id=100;

select*
from emp_backup;
select * from departments;

-----------------------------

create table emp_basic
as
select employee_id,first_name,salary
from employees
where 1=0;

create table emp_addinfo
as
select employee_id,first_name,hire_date
from employees
where 1=0;

insert all
into emp_basic values(employee_id,first_name,salary)
into emp_addinfo values(employee_id,first_name,hire_date)
select employee_id,first_name,salary,hire_date
from employees;

select *
from emp_basic;

select *
from emp_addinfo;


truncate table emp_basic;
truncate table emp_addinfo;


insert all
when employee_id<110 then
into emp_basic values(employee_id,first_name,salary)
when salary>10000  then
into emp_addinfo values(employee_id,first_name,hire_date)
select employee_id,first_name,salary,hire_date
from employees;


select *
from emp_basic;

select *
from emp_addinfo;



--update
update emp_basic
set salary =salary*1.1 , first_name='수정'
where employee_id<=102;



select *
from emp_backup;

update emp_backup
set hire_date = sysdate
where salary>0;

update emp_backup
set hire_date = '2022-12-31'
where salary=0;
--update subquery
update emp_backup
set salary =(select salary
from emp_backup
where first_name= 'Nancy' )
where first_name= 'Luis' ;

update emp_backup
set (salary,hire_date) =(select salary,hire_date
from emp_backup
where first_name= 'Nancy' )
where first_name= 'Luis' ;

--delete  데이터가 날라감
--delete from 테이블이름 where 조건


--commit

commit;

delete from emp_backup;
select * from emp_backup;

drop table emp_backup;

desc emp_backup;

insert into emp_backup
select employee_id,first_name,salary,hire_date
from employees;


create table emp_backup
as
select employee_id,first_name,salary,hire_date,department_id
from employees;

select * from departments;

delete
from emp_backup
where  department_id=(select  department_id
from departments
where department_name='IT');


--merge
create table emp01
as
select employee_id,first_name,salary,hire_date from employees;

create table emp02
as
select employee_id,first_name,salary,hire_date from employees
where department_id =60;

update emp02
set first_name='수정';

insert into emp02
values(99,'강희원',4300,sysdate);

--emp01 107건 emp02에는 5+1건이있다.
-- 두테이블중  emp02에 5건은 포함되있고 1건은 미포함 이유 내가 넣엇기때문
merge into emp01 using emp02
on(emp01.employee_id = emp02.employee_id)
when matched then
update set
emp01.first_name=emp02.first_name
when not matched then
insert values(emp02.employee_id, emp02.first_name,emp02.salary,emp02.hire_date);



select * from emp01; -- 그래서 총 107+1개가됨
select * from emp02;


--오후 트랜잭션
select * from emp02;

--DML(insert,update,delete)
delete from emp02 where employee_id=103;
delete from emp02 where employee_id=104;
delete from emp02 where employee_id=105;
--여기서는 지워져 보이지만
select * from emp02;
--sqlplus에서는 지워져 있지않다!!
--지웟던일을 없앤다 rollback
rollback;
select * from emp02;


--DML(insert,update,delete)
delete from emp02 where employee_id=103;
delete from emp02 where employee_id=104;
delete from emp02 where employee_id=105;

select * from emp02;
--이번엔  commit
commit;
--이번엔 sqlplus 역시 삭제 !!

rollback;


select * from emp02;
delete from emp02 where employee_id =106;
rollback;

select * from emp02;
delete from emp02 where employee_id =107;
rollback;
----3시수업
-- 제약조건 not null 이 2개여서 2개는 꼭넣어야한다!!
desc department;
insert into departments(department_id,department_name) values(11,'aa');
select * from departments;
--제약 조건 확인이 가능
desc user_constraints;

select *
from user_constraints
where table_name='EMPLOYEES';

select *
from user_cons_columns;

select *
from user_cons_columns
where table_name='EMPLOYEES';

select column_name, constraint_type, search_condition
from user_constraints join user_cons_columns using(CONSTRAINT_NAME)
where user_constraints.table_name='EMPLOYEES';

--p(primary key): 유일값, null 불가 ( 필수칼럼), 하나의 테이블에 오직 하나
--u(unique) : 유일값,null 가능
--r(foreign key) :  참조키,외래키 , 다른 테이블의 PK를 참조한다. , 같은 테이블의 칼럼 참조 가능 PK가 아닌 칼럼도 참조 가능!
--c(Check) : 조건에 맞는 데이터만 가능  

--제약조건 을 포함한  테이블만들기
drop table customer;


create table customer(
-- p, not,null,u,c,r
cust_id number constraint customer_cust_id_pk primary key,
cust_name varchar2(30) not null,
email varchar2(20) unique,
address varchar2(100),
gender char(1) check(gender in('M','F')),
dept_id number constraint customer_dept_id_fk references departments(department_id));


--칼럼값 넣기

insert into customer(cust_id,cust_name) values(1,'김길동');

select * from customer;
-- 4시 수업  무결성 
insert into customer(cust_id,cust_name) values(2,'aa');
insert into customer(cust_id,cust_name,email) values(4,'aa','kha0202kha@naver.com');

drop table customer;
create table customer(
-- p, not,null,u,c,r
cust_id number constraint customer_cust_id_pk primary key,
cust_name varchar2(30) not null,
email varchar2(20) constraint customer_email_unique unique,
address varchar2(100),
gender char(1) constraint customer_gender_check check(gender in('M','F')),
dept_id number constraint customer_dept_id_fk references departments(department_id));


insert into customer(cust_id,cust_name,email) values(5,'aa','kha0202kh@naver.com');
select * from customer;

insert into customer(cust_id,cust_name,email,gender) values(6,'aa','kha0202kha@naver.com','A');-- 안될수밖에없음 Check 에 m,f밖에못넘
insert into customer(cust_id,cust_name,email,gender) values(6,'aa','kha0202@naver.com','M');
insert into customer(cust_id,cust_name,email,gender,dept_id) values(8,'aa','kha00@naver.com','M',32);  -- 안될수밖에없음 dept_id가 존재하지않음
insert into customer(cust_id,cust_name,email,gender,dept_id) values(8,'aa','kha00@naver.com','M',100);  

select * from customer;

--제약조건 변경 도 있음 인터넷에 나중 검색하고 풀어보장
--modify


----
select column_name, constraint_type, search_condition
from user_constraints join user_cons_columns using(CONSTRAINT_NAME)
where user_constraints.table_name='JOB_HISTORY';

--상품정보: 상품번호,이름,가격
CREATE TABLE 상품정보(
상품번호 number CONSTRAINT CONSTRAINT_GOODS_PK PRIMARY KEY,
상품이름 varchar2(100),
상품가격 number(9)
);
--고객정보: 고객번호, 이름,  .....

--주문:  고객번호 , 상품번호 ,순서, 주문일자 , 수량 
CREATE TABLE 주문(
고객번호 NUMBER ,
주문일자 DATE ,
순서 NUMBER ,
상품번호 NUMBER CONSTRAINT ORDER_GODDS_FK REFERENCES 상품정보(상품번호),
수량 NUMBER,
CONSTRAINT ORDER_PK PRIMARY KEY(고객번호,주문일자, 순서)
);

INSERT INTO 상품정보 VALUES(1,'노트북',100);
INSERT INTO 상품정보 VALUES(2,'스마트폰',100);
SELECT * FROM 상품정보;


SELECT * FROM CUSTOMER;
INSERT INTO 주문 VALUES(4,'2001-03-17',1,2,10);
INSERT INTO 주문 VALUES(4,'2001-03-17',2,2,10);
INSERT INTO 주문 VALUES(4,'2001-03-17',3,2,10);
SELECT * FROM 주문;



--DEFAULT 적용
drop table customer;


create table customer(
-- p, not,null,u,c,r
cust_id number constraint customer_cust_id_pk primary key,
cust_name varchar2(30) not null,
email varchar2(20) constraint customer_email_unique unique,
address varchar2(100),
gender char(1) constraint customer_gender_check check(gender in('M','F')),
dept_id number constraint customer_dept_id_fk references departments(department_id),
LOC VARCHAR2(20) DEFAULT 'SEOUL'
);

insert into customer(cust_id,cust_name,email,dept_id) values(7,'aa','kha0202kha@naver.com',100);
insert into customer(cust_id,cust_name,email,dept_id,LOC) values(8,'aa','kha020@naver.com',100,'대전');
insert into customer(cust_id,cust_name,email,dept_id,LOC) values(9,'aa','kha00@naver.com',10,'');
select * from customer;



select * from employees;

select * from departments;

--참조키 바로제거 불가능!!
delete from departments
where department_id =100;

--바로지워보자

alter table employees
disable constraint emp_dept_fk;

alter table customer
disable constraint customer_dept_id_fk;
--복구
alter table employees
enable constraint emp_dept_fk;


insert into departments values(100,'Finance',	108,	1700);



--------------------5시 LAB
--5시 수업 LABS
1. 
2007년 입사한(hire_date) 직원들의 사번(employee_id), 이름(first_name), 
성(last_name), 부서명(department_name)을 조회하려 합니다.
임시 테이블 용도로 사용하는 Object를 생성합니다.
==>emp_2007_details

이때, 부서에 배치되지 않은 직원의 경우, '<NOT ASSIGNED>'로 보여줍니다.

create table emp_2007_details(
-- p, not,null,u,c,r
cust_id number constraint customer_cust_id_pk primary key,
cust_name varchar2(30) not null,
email varchar2(20) constraint customer_email_unique unique,
address varchar2(100),
gender char(1) constraint customer_gender_check check(gender in('M','F')),
dept_id number constraint customer_dept_id_fk references departments(department_id),
LOC VARCHAR2(20) DEFAULT 'SEOUL'
);

drop table emp_2007_details;

create table emp_2007_details(
-- p, not,null,u,c,r
employee_id number constraint emp_2007_details_cust_id_pk primary key,
hire_date varchar2(30) not null,
first_name varchar2(20) constraint emp_2007_first_name_unique unique,
last_name  varchar2(20) constraint emp_2007_last_name_unique unique,
department_name varchar2(100) DEFAULT '<NOT ASSIGNED>'
);

INSERT INTO emp_2007_details VALUES(1,SYSDATE,'강','희원',NULL);
INSERT INTO emp_2007_details(employee_id,hire_date,first_name,last_name) VALUES(2,SYSDATE,'강1','희원1');


SELECT *
FROM emp_2007_details;

2.
기존 EMPLOYEES 테이블에 있는 레코드들 중, 'Marketing'부서에 근무하는 직원 레코드를
  이용하여 EMPLOYEES_MARKETING 테이블을   만들기 위한 DDL을 작성하십시오. 
  단, EMPLOYEES_MARKETING 테이블의 키는   없어도 관계없습니다.


create table EMPLOYEES_MARKETING
as
select *
from employees
where department_id =(select department_id 
from departments
where department_name='Marketing');



select *
from employees;

select *
from departments;



drop table EMPLOYEES_MARKETING;
select *
from EMPLOYEES_MARKETING;
3.
인사관리를 위하여 현재 직원정보에 대한 백업테이블을 생성하여 보관하기로 합니다. 
새로 생성하는 백업테이블명은 "EMPLOYEES_BACKUP" 이며 기존테이블(EMPLOYEES)의 Index, 
Constraint는 필요로 하지 않습니다. 단 급여(Salary)가 5000을 초과하는 직원만 백업테이블 내에 존재해야 합니다.
위 설명에 해당하는 테이블을 생성하기 위한 sql 스크립트를 작성하시오.

create table EMPLOYEES_BACKUP
as
select *
from employees
where salary>5000 and 1=0;

select *
from EMPLOYEES_BACKUP;

4.
인사관리를 위한 시스템 구축중 지역(Regions), 국가(Countries), 
위치(Locations)에 대한 전체 리스트 정보를 빈번하게 사용할 경우가 생겼다. 
여러 프로그램에서 매번 반복적으로 사용되며 일부 개발자의 경우 잘못된 
조인으로 올바른 결과를 가져오지 못하는 경우가 발생하였다. 
이를 해결하기 위해 복잡한 질의를 숨기기 위한 논리적 테이블의 용도로 
쓰이는 DB Object 를 생성하기로 하였다. 
DB Object 이름은 LOC_DETAILS_{DB OBJECT명} 을 사용한다.
위 설명에 해당하는 DB Object를 생성하기 위한 sql 스크립트를 작성하라.

create table LOC_DETAILS_
as
select *
from regions join countries using(region_id) join locations using(country_id);


select *
from LOC_DETAILS_;


select *
from regions;
select *
from Countries;
select *
from Locations;

5.
사원이 한 명 이상인 부서들에 대해 부서 번호, 부서 이름, 사원 수, 
최고 급여, 최저 급여, 평균 급여, 급여 총액을 빈번하게 조회하여야 
할 필요가 있어, VIEW를 생성하여 사용하고자 합니다. 
생성된 DB Object(VIEW)의 전체 레코드에 대한 조회 결과가 아래와 같이 출력되도록 
"DEPT_SAL_INFO"라는 VIEW 를 생성하는 sql 스크립트를 작성하십시오. 
단, 평균 급여의 소수점 이하는 절사합니다.

출력 : DEPT_ID | DEPT_NAME | NUM_EMP | MAX_SAL | MIN_SAL | AVG_SAL | SUM _SAL







6.
Sales 부서에서 Gerald Cambrault 라는 관리자(Manager_id)를 가지는 
직원의 정보를 조회하여 employee_sales_Gerald 라는 view를 생성하십시오.

사원번호  |  사원명  |  부서명  |  관리자명

 create view employee_sales_Gerald
 as
 select employee_id 사원번호, employee_name사원명,부서명,관리자명
 from employees
 where department_id = (select department_id
 from departments
 where department_name ='Sales')
 ;
 
 
 select 
 from employees
 where department_id = (select department_id
 from departments
 where department_name ='Sales');
 
 
 
 
select *
from employees;
 select *
from departments;
 
 
 
 
 
=====================================
7.
다음 조건을 만족하는 테이블 생성 DDL을 작성하십시오. 

테이블 명 : board

테이블에 대한 이해 : 게시판 정보를 가지는 테이블

칼럼명: 
board_seq	    (게시물 번호) 정수 최대 10자리,
board_title	    (게시물 제목) 문자 가변 자릿수 255자리,
board_contents   (게시물 내용) 문자 가변 자릿수 4000자리
board_writer     (게시물 작성자) 문자 가변 자릿수 100자리,
board_date       (게시물 작성시간) 날짜,	
board_viewcount  (게시물 조회수) 정수 최대 6자리,
board_password   (게시물 암호) 문자 가변 자릿수 20자리,	

제약조건 :  board_seq : 기본 키(Primary Key)  제약 조건명은 BOARD_SEQ_PK
 board_title :  값이 반드시 존재(NOT NULL) 
 board_writer : Member 테이블의 member_id 컬럼 참조

(Member  테이블
member_id 문자 가변 자릿수 100자리
           primary key 라고 가정합니다)
        
        
           
create table board(
board_seq	    number(10) constraint board_BOARD_SEQ_PK  primary key,
board_title	   varchar2(255) not null,
board_contents  varchar2(4000),
board_writer    varchar2(100) references Member(member_id),
board_date       number ,
board_viewcount  number(6),
board_password  varchar2(20));	

create table Member(
member_id varchar2(100) primary key
);





====================================

8.locations 테이블에서 2000번 이상의 도시코드, 도시명, 국가명, 그 도시에 있는
 부서명을 조회하여 citycode_gt_2000 라는 이름의 view를  생성하는 SQL 문장을 작성하시오.
단, citycode_gt_2000 view는 변경 가능하도록 생성합니다.

LOCATION_ID	  CITY	  COUNTRY_NAME	  DEPARTMENT_NAME












--- eclipse 수업 내용
desc employees;

insert into employees values(?,?,?,?,?,?,?,?,?,?,?);


SELECT * FROM EMPLOYEES;

--오후 트랜잭션
select * from emp02;

--DML(insert,update,delete)
delete from emp02 where employee_id=103;
delete from emp02 where employee_id=104;
delete from emp02 where employee_id=105;
--여기서는 지워져 보이지만
select * from emp02;
--sqlplus에서는 지워져 있지않다!!
--지웟던일을 없앤다 rollback
rollback;
select * from emp02;


--DML(insert,update,delete)
delete from emp02 where employee_id=103;
delete from emp02 where employee_id=104;
delete from emp02 where employee_id=105;

select * from emp02;
--이번엔  commit
commit;
--이번엔 sqlplus 역시 삭제 !!

rollback;


select * from emp02;
delete from emp02 where employee_id =106;
rollback;

select * from emp02;
delete from emp02 where employee_id =107;
rollback;

















//eclipse
EmpDAO EmpConTroller  예제!!
	//3월 17일 
	//CRUD(Create: insert, Read:select,U:update,D:delete)
	///사용자가 웹을 통해서 회원가입 ->Controller->DAO
	public int insertEmp(EmpVO emp) {
		String sql ="insert into employees values(?,?,?,?,?,?,?,?,?,?,?)";
		Connection conn;
		PreparedStatement st;
		int result=0;
		
		conn = DBUtil.getConnection();
		try {
			st=conn.prepareStatement(sql);
			st.setInt(1, emp.getEmployee_id());
			st.setString(2, emp.getFirst_name());
			st.setString(3, emp.getLast_name());
			st.setString(4, emp.getEmail());
			st.setString(5, emp.getPhone_number());
			st.setDate(6, emp.getHire_date());
			st.setString(7, emp.getJob_id());
			st.setInt(8, emp.getSalary());
			st.setDouble(9,emp.getCommission_pct());
			st.setInt(10, emp.getManager_id());
			st.setInt(11, emp.getDepartment_id());
			result =st.executeUpdate(); //insert/update/delete는 executeUpdate()를 써야한다.
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return result;
	}
  
  //controller
  	private static void method9() {
		//3월 17일 입력 메서드
		EmpDAO dao= new EmpDAO();
		EmpVO emp = makeEmp();
		int result=dao.insertEmp(emp);
		EmpView.display(result>0?"입력성공":"입력실패");
	}
	//3월 17일 입력 메서드
	private static EmpVO makeEmp(){
		EmpVO emp = new EmpVO(); // 너무많으므로 default를 만든다
		// new EmpVo("11개")넣는것보다 ->이렇게 하나하나 직접넣는게 best
		emp.setCommission_pct(0.5);
		emp.setDepartment_id(10);
		emp.setEmail("kha0202kha@naver.com");
		emp.setEmployee_id(9);
		emp.setFirst_name("강");
		emp.setHire_date(new Date(200,01,01));
		emp.setJob_id("IT_PROG");
		emp.setLast_name("희원");
		emp.setManager_id(100);
		emp.setPhone_number("010-1111-2222");
		emp.setSalary(4300);
		return emp;
	}
public int insertEmp(EmpVO emp) {
		String sql ="insert into employees values(?,?,?,?,?,?,?,?,?,?,?)";
		Connection conn;
		PreparedStatement st=null;
		int result=0;
		
		conn = DBUtil.getConnection();
		try {
			conn.setAutoCommit(false);  //한번에 여러 sql문을 실행하고자 하는경우 사용
			st=conn.prepareStatement(sql);
			st.setInt(1, emp.getEmployee_id());
			st.setString(2, emp.getFirst_name());
			st.setString(3, emp.getLast_name());
			st.setString(4, emp.getEmail());
			st.setString(5, emp.getPhone_number());
			st.setDate(6, emp.getHire_date());
			st.setString(7, emp.getJob_id());
			st.setInt(8, emp.getSalary());
			st.setDouble(9,emp.getCommission_pct());
			st.setInt(10, emp.getManager_id());
			st.setInt(11, emp.getDepartment_id());
			result =st.executeUpdate(); //insert/update/delete는 executeUpdate()를 써야한다.
			conn.commit();
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			e.printStackTrace();
		}finally {
			DBUtil.dbClose(null, st, conn);
		}
		
		return result;
	}
	
