//// JDBC_2day일은 몸이아파서 못나갔으므로  JDBC_3day일과 같이 넣어서복습
//jdbc_3day
// JDBC 폴더에서 마우스오른쪽 Properties-> build path 에서 orcle 버전 적용후 실행!! jdbc!!


package jdbcProject.dbtest2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DBUtil {

	//1.DB연결을 만들어주기
	public static Connection getConnection() {
		Connection conn = null;
		String driverName = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@localhost:1521:xe";
		String userid="hr", password="hr";
		
		try {
			Class.forName(driverName);
			conn = DriverManager.getConnection(url, userid, password);
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return conn;
	}
	//2.자원반납 
	public static void dbClose(ResultSet rs, Statement st, Connection conn) {
		try {
			if(rs!=null) rs.close();
			if(st!=null) st.close();
			if(conn!=null) conn.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
}
package jdbcProject.dbtest2;


import java.sql.*;



public class JDBC_LAB {

	static Connection conn;
	static Statement st;
	static ResultSet rs;
	
	public static void main(String[] args) throws SQLException {
		//
		//method1("john");
//		method2(80);
		method3("john");  //1번을 binding변수 사용

	}
	private static void method3(String fname) throws SQLException {
		String sql=
				"select salary,hire_date,first_name||last_name"+
				" From employees "+
				" where first_name= initcap(?)";
			//1.DB연결
			conn = DBUtil.getConnection();
			//2.DB와 대화통로 만들기
//			st=conn.createStatement(); // method2와 같이 st는 지원이 안됨
			PreparedStatement pst;
			pst=conn.prepareStatement(sql);
			pst.setString(1, fname);  // 1: 첫번쨰 물음표!!
			//3.SQL문실행
//			rs=st.executeQuery(sql);
			rs=pst.executeQuery();
			//읽기위해 접근: rs.next()
			//4.select결과를 사용하기
			while(rs.next()) {
				int sal=rs.getInt(1);
				Date dt= rs.getDate("hire_date");
				String first_name=rs.getString(3);
				System.out.println("급여: "+sal);
				System.out.println("입사일: "+dt);
				System.out.println("이름: "+first_name);
				System.out.println("=====================");
			}
			DBUtil.dbClose(rs, pst, conn);
	}
	private static void method2(int did) throws SQLException {
		String sql=
				"select salary,hire_date,first_name||last_name, department_id"+
				" From employees"+          // sql문을 eclipse에서 사용할떄는 두번째줄부터는 앞줄에 공백을 줘야한다!
				" where department_id = ?"  ; //?-> 바인딩변수
			//1.DB연결
			conn = DBUtil.getConnection();
			//2.DB와 대화통로 만들기
			//st=conn.createStatement();  //?-> 바인딩변수를 지원하지않는다!!
			PreparedStatement pst;		 //그래서 -PreparedStatement를 사용한다
			pst=conn.prepareStatement(sql);
			pst.setInt(1, did);
			//3.SQL문실행
			rs=pst.executeQuery();  //이미 pst에서 sql을 받았으므로 executeQuery() 괄호안에 내용을 지운다!!
			//읽기위해 접근: rs.next()
			//4.select결과를 사용하기
			while(rs.next()) {
				int sal=rs.getInt(1);
				Date dt= rs.getDate("hire_date");
				String first_name=rs.getString(3);
				int dept_id = rs.getInt("department_id");
				System.out.println("급여: "+sal);
				System.out.println("입사일: "+dt);
				System.out.println("이름: "+first_name);
				System.out.println("부서 번호 : "+dept_id);
				System.out.println("=====================");
			}
			DBUtil.dbClose(rs, pst, conn); //닫을때도 pst로 닫자!
	}
	
	private static void method1(String fname) throws SQLException {
		String sql=
				"select salary,hire_date,first_name||last_name"+
				" From employees "+
				" where first_name= initcap('"
				+fname
				+"')";
			//1.DB연결
			conn = DBUtil.getConnection();
			//2.DB와 대화통로 만들기
			st=conn.createStatement();
			//3.SQL문실행
			rs=st.executeQuery(sql);
			//읽기위해 접근: rs.next()
			//4.select결과를 사용하기
			while(rs.next()) {
				int sal=rs.getInt(1);
				Date dt= rs.getDate("hire_date");
				String first_name=rs.getString(3);
				System.out.println("급여: "+sal);
				System.out.println("입사일: "+dt);
				System.out.println("이름: "+first_name);
				System.out.println("=====================");
			}
			DBUtil.dbClose(rs, st, conn);
	}

}
package jdbcProject.dbtest2;

import java.sql.Date;

public class EmpData {
	 String first_name, last_name;
	 int salary;
	 Date hire_date;
	public EmpData(String first_name, String last_name, int salary, Date hire_date) {
		super();
		this.first_name = first_name;
		this.last_name = last_name;
		this.salary = salary;
		this.hire_date = hire_date;
	}
	public String getFirst_name() {
		return first_name;
	}
	public void setFirst_name(String first_name) {
		this.first_name = first_name;
	}
	public String getLast_name() {
		return last_name;
	}
	public void setLast_name(String last_name) {
		this.last_name = last_name;
	}
	public int getSalary() {
		return salary;
	}
	public void setSalary(int salary) {
		this.salary = salary;
	}
	public Date getHire_date() {
		return hire_date;
	}
	public void setHire_date(Date hire_date) {
		this.hire_date = hire_date;
	}
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("EmpData [first_name=").append(first_name).append(", last_name=").append(last_name)
				.append(", salary=").append(salary).append(", hire_date=").append(hire_date).append("]");
		return builder.toString();
	}
	 
	 
}
package jdbcProject.dbtest2;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class JDBC_LAB2 {

	static Connection conn;
	static PreparedStatement st;
	static	ResultSet rs;
	static String sql;
	//Controller
	public static void main(String[] args) throws SQLException {
		// 
		Integer[] depts= {30,50,80,90,100};
		int minSal=5000;
		int maxSal=17000;
//		method1(depts,minSal,maxSal);
//		method2(depts,minSal,maxSal); 
//		method3("r");
//		method4("r");  //리스트 사용법  -> 1.클래스를 따로만든다 -> EmpData
		
		List<EmpData> emplist = method4("r");  //method 4에서는 클래스를 따로만듬
		myPrint(emplist);
		
	}
	//VIEW
	private static void myPrint(List<EmpData> emplist) {
		for(EmpData emp:emplist) {
			System.out.println(emp);
		}
	}
	//MODEL-DAO
	private static List<EmpData> method4(String ch) throws SQLException {
			List<EmpData> emplist= new 	ArrayList<EmpData>();
			
			sql="select first_name, last_name, salary,  hire_date"+ 
				" from employees"+
				" where last_name like '__'||?||'%'";
			
			conn=DBUtil.getConnection();
			st=conn.prepareStatement(sql);
			st.setString(1, ch);
			rs=st.executeQuery();
			
			while(rs.next()) {
				emplist.add(new EmpData(rs.getString(1), rs.getString(2), rs.getInt(3),rs.getDate(4)));
			
				
			}
			DBUtil.dbClose(rs, st, conn);
			return emplist;
			
			
		}
	private static void method3(String ch) throws SQLException {
	/*	select first_name, last_name, salary,  hire_date 
		from employees
		where last_name like '__r%' */
		
		sql="select first_name, last_name, salary,  hire_date"+ 
			" from employees"+
			" where last_name like '__'||?||'%'";
		
		conn=DBUtil.getConnection();
		st=conn.prepareStatement(sql);
		st.setString(1, ch);
		rs=st.executeQuery();
		
		while(rs.next()) {
			System.out.println(rs.getString(1));
			System.out.println(rs.getString(2));
			System.out.println(rs.getInt(3));
			System.out.println(rs.getDate(4));
			System.out.println("=====================");
		}
		DBUtil.dbClose(rs, st, conn);
		
		
		
	}
	private static void method2(Integer[] depts,int minSal,int maxSal) throws SQLException {

		String dept_where=" and department_id in(";
		for(Integer i:depts) {
			dept_where+="?,";
		}
		dept_where=dept_where.substring(0, dept_where.length()-1)+")";
		
		System.out.println(dept_where);
		sql="select  * "+
				" from employees"+
				" where to_char(hire_date ,'yyyy') between '2000' and '2009'"+
				dept_where+
				" and salary between ? and ?"+
				" and commission_pct is not null"+
				" order by hire_date  , salary desc";
		//1.DB연결
		conn = DBUtil.getConnection();
		//2.DB와 대화통로 만들기
		st=conn.prepareStatement(sql);
	//	Array arr=conn.createArrayOf("INTEGER", depts);
	//	st.setArray(1, arr);  // 1: 첫번쨰 물음표!!
		int cnt=1;
		for(Integer i:depts) {
			st.setInt(cnt++, i);
		}
		
		st.setInt(cnt++, minSal);  // 1: 첫번쨰 물음표!!
		st.setInt(cnt++, maxSal);  // 1: 첫번쨰 물음표!!
		
		//3.SQL문실행
//		rs=st.executeQuery(sql);
		rs=st.executeQuery();
		while(rs.next()) {
			int empid=rs.getInt(1);
			String fname=rs.getString(2);
			Date d= rs.getDate("hire_date");
			int sal = rs.getInt("salary");
			int dept =rs.getInt("department_id");
			double comm=rs.getDouble("commission_pct");
			System.out.println(empid+"\t"+fname+"\t"+d+"\t"+sal+"\t"+dept+"\t"+comm);
		
			
			System.out.println("=====================");
		}
		DBUtil.dbClose(rs, st, conn);
	}
	private static void method1(Integer[] depts,int minSal,int maxSal) throws SQLException {
//		sql="select  * "+
//			" from employees"+
//			" where to_char(hire_date ,'yyyy') between '2000' and '2009'"+
//			" and department_id in (30, 50, 80 )"+
//			" and salary between 5000 and 17000"+
//			" and commission_pct is not null"+
//			" order by hire_date  , salary desc";
		sql="select  * "+
				" from employees"+
				" where to_char(hire_date ,'yyyy') between '2000' and '2009'"+
				" and department_id = ?"+
				" and salary between ? and ?"+
				" and commission_pct is not null"+
				" order by hire_date  , salary desc";
		//1.DB연결
		conn = DBUtil.getConnection();
		//2.DB와 대화통로 만들기
		st=conn.prepareStatement(sql);
	//	Array arr=conn.createArrayOf("INTEGER", depts);
	//	st.setArray(1, arr);  // 1: 첫번쨰 물음표!!
		st.setInt(1, depts[2]);  
		st.setInt(2, minSal);  // 1: 첫번쨰 물음표!!
		st.setInt(3, maxSal);  // 1: 첫번쨰 물음표!!
		
		//3.SQL문실행
//		rs=st.executeQuery(sql);
		rs=st.executeQuery();
		while(rs.next()) {
			int empid=rs.getInt(1);
			String fname=rs.getString(2);
			Date d= rs.getDate("hire_date");
			int sal = rs.getInt("salary");
			int dept =rs.getInt("department_id");
			double comm=rs.getDouble("commission_pct");
			System.out.println(empid+"\t"+fname+"\t"+d+"\t"+sal+"\t"+dept+"\t"+comm);
		
			
			System.out.println("=====================");
		}
		DBUtil.dbClose(rs, st, conn);
	}

}
////
package model;
//DTO(Data Transfer Object)

//VO(Value Object)
//EMPLOYEES 예
import java.sql.Date;

public class EmpVO {
	// ctrl shift y -> 전체를 소문자로
	
	private int employee_id;
	private String first_name;
	private String last_name;
	private String email;
	private String phone_number;
	private Date hire_date;
	private String job_id;
	private int salary;
	private double commission_pct;
	private int manager_id;
	private int department_id;
	//생성자
	//설정 다해야한다!!
	//default 생성자
	public EmpVO() {
		super();
	}
	//전부다들어간생성자
	public EmpVO(int employee_id, String first_name, String last_name, String email, String phone_number,
			Date hire_date, String job_id, int salary, double commission_pct, int manager_id, int department_id) {
		super();
		this.employee_id = employee_id;
		this.first_name = first_name;
		this.last_name = last_name;
		this.email = email;
		this.phone_number = phone_number;
		this.hire_date = hire_date;
		this.job_id = job_id;
		this.salary = salary;
		this.commission_pct = commission_pct;
		this.manager_id = manager_id;
		this.department_id = department_id;
	}
	// not null 인 생성자  
	public EmpVO(int employee_id, String last_name, String email, Date hire_date, String job_id) {
		super();
		this.employee_id = employee_id;
		this.last_name = last_name;
		this.email = email;
		this.hire_date = hire_date;
		this.job_id = job_id;
	}
	//getter/setter
	public int getEmployee_id() {
		return employee_id;
	}
	public void setEmployee_id(int employee_id) {
		this.employee_id = employee_id;
	}
	public String getFirst_name() {
		return first_name;
	}
	public void setFirst_name(String first_name) {
		this.first_name = first_name;
	}
	public String getLast_name() {
		return last_name;
	}
	public void setLast_name(String last_name) {
		this.last_name = last_name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getPhone_number() {
		return phone_number;
	}
	public void setPhone_number(String phone_number) {
		this.phone_number = phone_number;
	}
	public Date getHire_date() {
		return hire_date;
	}
	public void setHire_date(Date hire_date) {
		this.hire_date = hire_date;
	}
	public String getJob_id() {
		return job_id;
	}
	public void setJob_id(String job_id) {
		this.job_id = job_id;
	}
	public int getSalary() {
		return salary;
	}
	public void setSalary(int salary) {
		this.salary = salary;
	}
	public double getCommission_pct() {
		return commission_pct;
	}
	public void setCommission_pct(double commission_pct) {
		this.commission_pct = commission_pct;
	}
	public int getManager_id() {
		return manager_id;
	}
	public void setManager_id(int manager_id) {
		this.manager_id = manager_id;
	}
	public int getDepartment_id() {
		return department_id;
	}
	public void setDepartment_id(int department_id) {
		this.department_id = department_id;
	}
	//toString()
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("EmpVO 직원정보 [employee_id=").append(employee_id).append(", first_name=").append(first_name)
				.append(", last_name=").append(last_name).append(", email=").append(email).append(", phone_number=")
				.append(phone_number).append(", hire_date=").append(hire_date).append(", job_id=").append(job_id)
				.append(", salary=").append(salary).append(", commission_pct=").append(commission_pct)
				.append(", manager_id=").append(manager_id).append(", department_id=").append(department_id)
				.append("]");
		return builder.toString();
	}
	
	
	
}
package model;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import jdbcProject.dbtest2.DBUtil;

//DAO(Data Access Object)

public class EmpDAO {
	// 1.모든직원조회
	public List<EmpVO> selectAll() {
		List<EmpVO> emplist = new ArrayList<EmpVO>();
		Connection conn = DBUtil.getConnection();
		Statement st = null;
		ResultSet rs = null;
		String sql = "select * from employees";
		try {
			st = conn.createStatement();
			rs = st.executeQuery(sql);
			while (rs.next()) {
				emplist.add(makeEmp(rs)); // 이문장은 길기에 함수로 뺴놓자! ->makeEmp
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		DBUtil.dbClose(rs, st, conn);
		return emplist;
	}

	// 2.기본키(유일키):Primary key ... null불가, 필수칼럼,중복없음
	// 직원번호(기본키)로 조회
	public EmpVO selectById(int empid) {
		EmpVO emp = null;
		Connection conn = DBUtil.getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		String sql = "select * from employees where Employee_id=?"; // 직원의 아이디 가변 ?
		try {
			st = conn.prepareStatement(sql);
			st.setInt(1, empid);
			rs = st.executeQuery();
			while (rs.next()) {
				emp = makeEmp(rs);// 이문장은 길기에 함수로 뺴놓자! ->makeEmp

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		DBUtil.dbClose(rs, st, conn);
		return emp;
	}

	// 3.부서로 조회하기 -> 겹치는 사람이 있다!
	public List<EmpVO> selectByDept(int deptid) {
		List<EmpVO> emplist = new ArrayList<EmpVO>();
		Connection conn = DBUtil.getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		String sql = "select * from employees where Department_id=?";
		try {
			st = conn.prepareStatement(sql);
			st.setInt(1, deptid);
			rs = st.executeQuery();
			while (rs.next()) {
				emplist.add(makeEmp(rs)); // 이문장은 길기에 함수로 뺴놓자! ->makeEmp
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		DBUtil.dbClose(rs, st, conn);
		return emplist;
	}

	// 4.job_id로 조회
	public List<EmpVO> selectByjobId(String jobid) {
		List<EmpVO> emplist = new ArrayList<EmpVO>();
		Connection conn = DBUtil.getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		String sql = "select * from employees where job_id=?";
		try {
			st = conn.prepareStatement(sql);
			st.setString(1, jobid);
			rs = st.executeQuery();
			while (rs.next()) {
				emplist.add(makeEmp(rs)); // 이문장은 길기에 함수로 뺴놓자! ->makeEmp
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		DBUtil.dbClose(rs, st, conn);
		return emplist;
	}

	// 5.급여로 조회
	public List<EmpVO> selectBySal(int minsal, int maxsal) {
		List<EmpVO> emplist = new ArrayList<EmpVO>();
		Connection conn = DBUtil.getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		String sql = "select * from employees where salary between ? and ?";
		try {
			st = conn.prepareStatement(sql);
			st.setInt(1, minsal);
			st.setInt(2, maxsal);
			rs = st.executeQuery();
			while (rs.next()) {
				emplist.add(makeEmp(rs)); // 이문장은 길기에 함수로 뺴놓자! ->makeEmp
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		DBUtil.dbClose(rs, st, conn);
		return emplist;
	}

	// 6.입사일로 조회
	public List<EmpVO> selectHire_Date(String date, String date1) {
		List<EmpVO> emplist = new ArrayList<EmpVO>();
		Connection conn = DBUtil.getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		String sql = "select * from employees where hire_date between ? and ?";
		try {
			st = conn.prepareStatement(sql);
			st.setString(1, date);
			st.setString(2, date1);
			rs = st.executeQuery();
			while (rs.next()) {
				emplist.add(makeEmp(rs)); // 이문장은 길기에 함수로 뺴놓자! ->makeEmp
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		DBUtil.dbClose(rs, st, conn);
		return emplist;
	}

	// 7.이름에 특정문자가 들어간 사람 조회
	public List<EmpVO> selectSpecialName(String name) {
		List<EmpVO> emplist = new ArrayList<EmpVO>();
		Connection conn = DBUtil.getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		String sql = "select * from employees where first_name=initcap(?) ";
		try {
			st = conn.prepareStatement(sql);
			st.setString(1, name);
			rs = st.executeQuery();
			while (rs.next()) {
				emplist.add(makeEmp(rs)); // 이문장은 길기에 함수로 뺴놓자! ->makeEmp
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		DBUtil.dbClose(rs, st, conn);
		return emplist;
	}

	// 7-1.이름에 특정문자가 들어간 사람 조회
	public List<EmpVO> selectSpecialName2(String name) {
		List<EmpVO> emplist = new ArrayList<EmpVO>();
		Connection conn = DBUtil.getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		String sql = "select * from employees where first_name like ?||'%' ";
		try {
			st = conn.prepareStatement(sql);
			st.setString(1, name);
			rs = st.executeQuery();
			while (rs.next()) {
				emplist.add(makeEmp(rs)); // 이문장은 길기에 함수로 뺴놓자! ->makeEmp
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		DBUtil.dbClose(rs, st, conn);
		return emplist;
	}

	// 7-2.이름에 특정문자가 들어간 사람 조회
	public List<EmpVO> selectByName(String ch) {
		List<EmpVO> emplist = new ArrayList<EmpVO>();
		Connection conn = DBUtil.getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		String sql = "select * from employees where first_name like ? ";
		try {
			st = conn.prepareStatement(sql);
			st.setString(1, "%"+ch+"%");
			rs = st.executeQuery();
			while (rs.next()) {
				emplist.add(makeEmp(rs)); // 이문장은 길기에 함수로 뺴놓자! ->makeEmp
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		DBUtil.dbClose(rs, st, conn);
		return emplist;
	}

	// 8.여러조건으로 조회 (부서,job,salary,hire_date)
	public List<EmpVO> selectByCondition(int deptid,String jobid,int sal,Date hdate) {
		List<EmpVO> emplist = new ArrayList<EmpVO>();
		Connection conn = DBUtil.getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		String sql = "select *"+
					" from employees"+
					" where department_id=?"+
					" and job_id=?"+
					" and salary>=?"+
					" and hire_date between ? and add_months(?,24)";
		try {
			st = conn.prepareStatement(sql);
			st.setInt(1, deptid);
			st.setString(2, jobid);
			st.setInt(3, sal);
			st.setDate(4, hdate);
			st.setDate(5, hdate);
			rs = st.executeQuery();
			while (rs.next()) {
				emplist.add(makeEmp(rs)); // 이문장은 길기에 함수로 뺴놓자! ->makeEmp
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		DBUtil.dbClose(rs, st, conn);
		return emplist;
	}

	// 중요한 함수!!
	private EmpVO makeEmp(ResultSet rs) throws SQLException {
		EmpVO emp = new EmpVO(); // 너무많으므로 default를 만든다
		// new EmpVo("11개")넣는것보다 ->이렇게 하나하나 직접넣는게 best
		emp.setCommission_pct(rs.getDouble("Commission_pct"));
		emp.setDepartment_id(rs.getInt("Department_id"));
		emp.setEmail(rs.getString("Email"));
		emp.setEmployee_id(rs.getInt("Employee_id"));
		emp.setFirst_name(rs.getString("First_name"));
		emp.setHire_date(rs.getDate("Hire_date"));
		emp.setJob_id(rs.getString("Job_id"));
		emp.setLast_name(rs.getString("Last_name"));
		emp.setManager_id(rs.getInt("Manager_id"));
		emp.setPhone_number(rs.getString("Phone_number"));
		emp.setSalary(rs.getInt("Salary"));
		return emp;
	}

}
package controller;

import java.sql.Date;
import java.util.List;

import View.EmpView;
import model.EmpDAO;
import model.EmpVO;

public class EmpController {

	public static void main(String[] args) {
		//EmpVO->EmpDAO->EmpController->EmpView
		
		//1.모든직원조회
		method1();
		// 2.기본키(유일키):Primary key ... null불가, 필수칼럼,중복없음
		// 직원번호(기본키)로 조회
		method2(120);
		// 3.부서로 조회하기   -> 겹치는 사람이 있다!
		method3(60);
		// 4.job_id로 조회
		method4("IT_PROG");
		// 5.급여로 조회
		method5(10000,15000);
	//// 6.입사일로 조회
		method6("2005-06-25","2006-01-01");
		
	//7.이름에 특정문자가 들어간 사람 조회	
		method7("david");
		method7_1("S");
		method7_2("exa");
		
	// 8.여러조건으로 조회 (부서,job,salary,hire_date)
		method8(60,"IT_PROG",1000,"2005-01-01");
	}
	private static void method8(int dept,String job,int sal,String hdate) {
		//
		EmpDAO dao= new EmpDAO();
		List<EmpVO> empList = dao.selectByCondition(dept,job,sal,Date.valueOf(hdate));
		System.out.println("============8.8.여러조건으로 조회 (부서,job,salary,hire_date)=============");
		EmpView.display(empList);
	}
	private static void method7_2(String ch) {
		EmpDAO dao= new EmpDAO();
		List<EmpVO> empList = dao.selectByName(ch);
		System.out.println("============7.2. 특정이름으로 조회하기=============");
		EmpView.display(empList);
		
	}
	// 7.1 .이름에 특정문자가 들어간 사람 조회
	private static void method7_1(String name) {
		//
		EmpDAO dao= new EmpDAO();
		List<EmpVO> empList = dao.selectSpecialName2(name);
		System.out.println("============7.1. 특정이름으로 조회하기=============");
		EmpView.display(empList);
	}
	
	// 7.이름에 특정문자가 들어간 사람 조회
	private static void method7(String name) {
		//
		EmpDAO dao= new EmpDAO();
		List<EmpVO> empList = dao.selectSpecialName(name);
		System.out.println("============7.특정이름으로 조회하기=============");
		EmpView.display(empList);
	}


	
	//// 6.입사일로 조회
	private static void method6(String date,String date1) {
		//
		EmpDAO dao= new EmpDAO();
		List<EmpVO> empList = dao.selectHire_Date(date,date1);
		System.out.println("============6.입사일로 조회하기=============");
		EmpView.display(empList);
	}
	//// 5.급여로 조회
	private static void method5(int minsal,int maxsal) {
		//
		EmpDAO dao= new EmpDAO();
		List<EmpVO> empList = dao.selectBySal(minsal,maxsal);
		System.out.println("============5.Salary로조회하기=============");
		EmpView.display(empList);
	}
	// 4.job_id로 조회
	private static void method4(String jobid) {
		//
		EmpDAO dao= new EmpDAO();
		List<EmpVO> empList = dao.selectByjobId(jobid);
		System.out.println("============4.JOB_ID로조회하기=============");
		EmpView.display(empList);
	}
	// 3.부서로 조회하기   -> 겹치는 사람이 있다!
	private static void method3(int deptid) {
		//
		EmpDAO dao= new EmpDAO();
		List<EmpVO> empList = dao.selectByDept(deptid);
		System.out.println("============3.부서로조회하기=============");
		EmpView.display(empList);
	}
	// 2.기본키(유일키):Primary key ... null불가, 필수칼럼,중복없음
	// 직원번호(기본키)로 조회
	private static void method2(int empid) {
		//
		EmpDAO dao= new EmpDAO();
		EmpVO emp = dao.selectById(empid);
		EmpView.display(emp);
		
	}
	// 1.모든직원조회
	private static void method1() {
		// 
		EmpDAO dao= new EmpDAO();
		List<EmpVO> empList = dao.selectAll();
		EmpView.display(empList);
	}

}
package View;

import java.util.List;

import model.EmpVO;

public class EmpView {

	public static void display(List<EmpVO> empList) {
		System.out.println("-----직원의 정보 여러건 출력------");
		for(EmpVO emp:empList) {
			System.out.println("****"+emp.getFirst_name()+"******");
			System.out.println(emp);
		}
	}
	public static void display(EmpVO emp) {
		System.out.println("-----직원의 정보 1건 출력------");
		System.out.println(emp);
	}
	public static void display(String message) {
		System.out.println("-----알림------");
		System.out.println(message);
	}
}
////









