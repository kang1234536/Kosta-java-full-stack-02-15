// interface
//2월24일 공부내용
package com.kosta.day08;

public interface RemoteController {
	//1.상수
	public static final int MAX_VOLUME=10;
	//public static final 생략가능
	int MIN_VOLUME=0;
	
	//2.추상메서드
	
	public abstract  void turnOn();
	//abstract  생략가능
	public  void turnOff();
	//public abstract  생략가능
	void setVolume(int volume);
	
	//3.default 메서드 ..구현class들이 공통적으로 사용하는 기능 구현
	default void setMute(boolean mute) {
		if(mute==true) {
			System.out.println("무음처리합니다");
		}else {
			System.out.println("무음을 해제 합니다.");

		}
	}
	//4.static 메서드... interface method, 구현class메서드가 아니다.
	//RemoteController.changeBattery() 호출해야한다.
	//인터페이스에서만 관여할수 있는 메서드!!!
	static void changeBattery() {
		System.out.println("건전지를 교환한다");
	}
	
	
}
///////
package com.kosta.day08;



public class Television implements RemoteController {
	private int volume;
	
	
	
	

	public int getVolume() {
		return volume;
	}

	@Override
	public void turnOn() {
		System.out.println("TV의 전원을 킨다!");

	}

	@Override
	public void turnOff() {
		// TODO Auto-generated method stub
		System.out.println("TV의 전원을 끈다!");

	}

	@Override
	public void setVolume(int volume) {
		// TODO Auto-generated method stub
		//if(volume<RemoteController.MAX_VOLUME && volume>=RemoteController.MAX_VOLUME )
		if(volume>RemoteController.MAX_VOLUME)
			this.volume=RemoteController.MAX_VOLUME;
		else if(volume<RemoteController.MIN_VOLUME)
			this.volume=RemoteController.MIN_VOLUME;
		else {
			this.volume=volume;
			
		}
		System.out.println("현재볼륨은 "+this.volume);
	}

}

//////
package com.kosta.day08;

public class RemoteControllerExample {

	public static void main(String[] args) {
	
		method1(new Television());
		
		//익명의 interface를 구현한 class
		
		//불가...interface객체 생성불가.... new RemoteController();
		method1(new RemoteController() {

			@Override
			public void turnOn() {
				// TODO Auto-generated method stub
				System.out.println("익명 구현class...turnOn");
				
			}

			@Override
			public void turnOff() {
				// TODO Auto-generated method stub
				System.out.println("익명 구현class...turnOff");

			}

			@Override
			public void setVolume(int volume) {
				// TODO Auto-generated method stub
				System.out.println("익명 구현class...setVolume"+volume);

			}
			
		});
		
	
		
		
	}

	private static void method1(RemoteController remote) {
		//
		remote.turnOn();
		remote.setVolume(20);
		remote.setMute(true);
		remote.setMute(false);
		remote.turnOff();

		RemoteController.changeBattery();

	}

}
//다중 인터페이스

package com.kosta.day08;



interface A {
	// 추상메서드
	void method1();

	void method2();

}

interface B {
	// 추상메서드
	void method3();

	void method4();

}

class 구현class implements A, B {

	@Override
	public void method3() {
		System.out.println("구현 class method3");

	}

	@Override
	public void method4() {
		// TODO Auto-generated method stub
		System.out.println("구현 class method4");

	}

	@Override
	public void method1() {
		// TODO Auto-generated method stub
		System.out.println("구현 class method1");

	}

	@Override
	public void method2() {
		// TODO Auto-generated method stub
		System.out.println("구현 class method2");

	}

}

class 구현class2 implements A, B {

	@Override
	public void method3() {
		System.out.println("구현 class2 method3");

	}

	@Override
	public void method4() {
		// TODO Auto-generated method stub
		System.out.println("구현 class2 method4");

	}

	@Override
	public void method1() {
		// TODO Auto-generated method stub
		System.out.println("구현 class2 method1");

	}

	@Override
	public void method2() {
		// TODO Auto-generated method stub
		System.out.println("구현 class2 method2");

	}

}

public class InterfaceTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		infoPrint(new 구현class());
		infoPrint(new 구현class2());
	}

	private static void infoPrint(A aa) {
		aa.method1();
		aa.method2();
		if (aa instanceof B) {
			B bb = ((B) aa);
			bb.method3();
			bb.method4();
		}
		System.out.println("***************");
	}

}

