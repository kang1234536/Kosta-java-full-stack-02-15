//3월19일 프로젝트 예시
VO->DAO->VIEW->CONTROLLER
package model;

import java.sql.Date;

public class BoardVO {
	private long board_seq;
	private String board_title;
	private String board_contents;
	private int board_writer;
	private Date board_date;
	private int  board_viewcount;
	private String board_password;
	private String board_image;
	public BoardVO() {
		super();
	}
	public BoardVO(long board_seq, String board_title, String board_contents, int board_writer, Date board_date,
			int board_viewcount, String board_password, String board_image) {
		super();
		this.board_seq = board_seq;
		this.board_title = board_title;
		this.board_contents = board_contents;
		this.board_writer = board_writer;
		this.board_date = board_date;
		this.board_viewcount = board_viewcount;
		this.board_password = board_password;
		this.board_image = board_image;
	}
	
	public long getBoard_seq() {
		return board_seq;
	}
	public void setBoard_seq(long board_seq) {
		this.board_seq = board_seq;
	}
	public String getBoard_title() {
		return board_title;
	}
	public void setBoard_title(String board_title) {
		this.board_title = board_title;
	}
	public String getBoard_contents() {
		return board_contents;
	}
	public void setBoard_contents(String board_contents) {
		this.board_contents = board_contents;
	}
	public int getBoard_writer() {
		return board_writer;
	}
	public void setBoard_writer(int board_writer) {
		this.board_writer = board_writer;
	}
	public Date getBoard_date() {
		return board_date;
	}
	public void setBoard_date(Date board_date) {
		this.board_date = board_date;
	}
	public int getBoard_viewcount() {
		return board_viewcount;
	}
	public void setBoard_viewcount(int board_viewcount) {
		this.board_viewcount = board_viewcount;
	}
	public String getBoard_password() {
		return board_password;
	}
	public void setBoard_password(String board_password) {
		this.board_password = board_password;
	}
	public String getBoard_image() {
		return board_image;
	}
	public void setBoard_image(String board_image) {
		this.board_image = board_image;
	}
	@Override
	public String toString() {
		return "BoardVO [board_seq=" + board_seq + ", board_title=" + board_title + ", board_contents=" + board_contents
				+ ", board_writer=" + board_writer + ", board_date=" + board_date + ", board_viewcount="
				+ board_viewcount + ", board_password=" + board_password + ", board_image=" + board_image + "]";
	}

}
//board_seq	    number(10) constraint board_BOARD_SEQ_PK  primary key,
//board_title	   varchar2(255) not null,
//board_contents  varchar2(4000),
//board_writer    varchar2(100) constraint board_board_writer_fk  references Member(member_id),
//board_date       date default sysdate,
//board_viewcount  number(6) constraint board_board_viewcount_check check (board_viewcount>0),
//board_password  varchar2(20),
//board_image varchar2(100) constraint board_board_image_unique unique
//);	
//
package model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.List;

import util.DBUtil;

//DAO(Data Access Object)
public class BoardDAO {
	//상세보기
	public BoardVO selectByNo(int boardNo) {
		BoardVO board = null;
		Connection conn = null;
		PreparedStatement st = null;
		ResultSet rs = null;
		String sql = "select * from board where Board_seq=?";
		String sql2 = "update board set board_viewcount=nvl(board_viewcount,0)+1 where board_seq=? ";
		
		conn = DBUtil.getConnection();
		try {
			st = conn.prepareStatement(sql);
			st.setLong(1, boardNo);
			rs= st.executeQuery();
			while(rs.next()) {
				board=makeBoard(rs);
				st=conn.prepareStatement(sql2);
				st.setLong(1, boardNo);
				int result = st.executeUpdate();
				System.out.println(result>0?"board_view수정":"board_view수정 실패");
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			DBUtil.dbClose(rs, st, conn);
		}
		return board;
	}
	
	// 입력
	public int boardInsert(BoardVO board) {

		int result = 0;
		Connection conn = null;
		PreparedStatement st = null;
		// sequence 만들기 create sequence board_autonum;
		//--제약조건 지우기
		//ALTER TABLE BOARD
		//DROP CONSTRAINT BOARD_BOARD_VIEWCOUNT_CHECK;
		String sql = "insert into board values(board_autonum.nextval,?,?,?,sysdate,0,?,?)";

		conn = DBUtil.getConnection();
		try {
			conn.setAutoCommit(false); // 한번에 여러 sql문을 실행하고자 하는경우 사용
			st = conn.prepareStatement(sql);
			st.setString(1, board.getBoard_title());
			st.setString(2, board.getBoard_contents());
			st.setInt(3, board.getBoard_writer());
			st.setString(4, board.getBoard_password());
			st.setString(5, board.getBoard_image());

			result = st.executeUpdate(); // insert/update/delete는 executeUpdate()를 써야한다.
			conn.commit();
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			e.printStackTrace();
		} finally {
			DBUtil.dbClose(null, st, conn);
		}

		return result;
	}

	// 전체출력
	public List<BoardVO> selectAll() {
		List<BoardVO> blist = new ArrayList<BoardVO>();
		Connection conn = null;

		PreparedStatement st = null;
		ResultSet rs = null;
		conn = DBUtil.getConnection();
		String sql = "select * from Board";
		try {
			st = conn.prepareStatement(sql);
			rs = st.executeQuery();
			while (rs.next()) {
				blist.add(makeBoard(rs)); // 이문장은 길기에 함수로 뺴놓자! ->makeEmp
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			DBUtil.dbClose(rs, st, conn);
		}

		return blist;

	}

	// 중요한 함수!!
	private BoardVO makeBoard(ResultSet rs) throws SQLException {
		// ResultSet에서 읽어서 VO객체를 만든다
		BoardVO board = new BoardVO(); // 너무많으므로 default를 만든다
		// new BoardVO("8개")넣는것보다 ->이렇게 하나하나 직접넣는게 best
		board.setBoard_seq(rs.getLong("Board_seq"));
		board.setBoard_title(rs.getString("Board_title"));
		board.setBoard_contents(rs.getString("Board_contents"));
		board.setBoard_writer(rs.getInt("Board_writer"));
		board.setBoard_date(rs.getDate("Board_date"));
		board.setBoard_viewcount(rs.getInt("Board_viewcount"));
		board.setBoard_password(rs.getString("Board_password"));
		board.setBoard_image(rs.getString("Board_image"));

		return board;
	}

	

	public int boardUpdate(BoardVO emp) {
		// update
		Connection conn = null;
		PreparedStatement st = null;
		int result = 0;
		String sql = "update board"+
					" set board_title =? ," +
					" board_contents=?, " +
					" board_date=sysdate, " +
					" board_password=?, " +
					" board_image=? "
				+ " where board_seq=? ";
		conn = DBUtil.getConnection();
		try {
			st = conn.prepareStatement(sql);

			st.setLong(5, emp.getBoard_seq());
			st.setString(1, emp.getBoard_title());
			st.setString(2, emp.getBoard_contents());
			st.setString(3, emp.getBoard_password());
			st.setString(4, emp.getBoard_image());

			result = st.executeUpdate(); // insert/update/delete는 executeUpdate()를 써야한다.
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			DBUtil.dbClose(null, st, conn);
		}
		return result;

	}

	public int boardDelete(int boardNo,String passwd) {
		// delete
		Connection conn=null;
		PreparedStatement st = null;
		int result = 0;
		BoardVO board=selectByNo(boardNo);
		
		String sql = "delete from board where board_seq=? ";
		conn = DBUtil.getConnection();
		try {
			if(!board.getBoard_password().equals(passwd)) throw new SQLException("비밀번호 오류~ 삭제불가");
			st = conn.prepareStatement(sql);
			st.setLong(1, boardNo);
			result = st.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			DBUtil.dbClose(null, st, conn);
		}

		return result;
	}


}
package view;

import java.util.List;

import model.BoardVO;

public class BoardView {
	public static void boardPrint(List<BoardVO> bList) {
		System.out.println("-----BoardList 출력------");
		
		for(BoardVO board:bList) {
			System.out.println(board);
			
		}
		
		
	}
	public static void boardPrint(BoardVO board) {
		System.out.println("-----Board 1건 출력------");
		System.out.println(board);
	}
	public static void boardPrint(String message) {
		System.out.println();
		System.out.println("[알림]: "+message);
	}
}
package controller;

import java.sql.Date;
import java.util.List;

import model.BoardDAO;
import model.BoardVO;
import view.BoardView;

public class BoardController {

	public static void main(String[] args) {

	
		// 입력코드 insert
	//	board_insert();


		// 전체출력
//		 board_selectALL();

		// update
//		board_update();
		
		// 상세보기
//		board_detail();
		//삭제하기
//		board_delete();
		

	}

	private static void board_delete() {
		BoardDAO boardDAO = new BoardDAO();
		BoardView.boardPrint(boardDAO.boardDelete(44, "pass수정")+"건 삭제");
	}

	private static void board_detail() {
		BoardDAO boardDAO = new BoardDAO();
		BoardView.boardPrint(boardDAO.selectByNo(44));
		
	}

	private static void board_update() {
		BoardDAO boardDAO = new BoardDAO();
		BoardView.boardPrint(boardDAO.selectByNo(44));
		BoardVO board1 = new BoardVO(44, "타이틀수정", "내용수정", 0, null, 0, "pass수정", "이미지경로수정");
		BoardView.boardPrint(boardDAO.boardUpdate(board1) + "건수정");
	}

	private static void board_insert() {
		BoardDAO boardDAO = new BoardDAO();
		BoardVO board = new BoardVO();
		int user =100;
		String pass= "패스워드";
		for(int i =11; i<20;i++) {
		board.setBoard_title("제목"+i);
		board.setBoard_contents("게시내용"+i);
		board.setBoard_writer(user);
		board.setBoard_password(pass);
		board.setBoard_image("images/logo.png"+i+".png");
		int result = boardDAO.boardInsert(board);
		BoardView.boardPrint(result>0?"입력성공":"입력실패");
		}
	}

	private static void board_selectALL() {
		//
		BoardDAO bao = new BoardDAO();
		List<BoardVO> bList = bao.selectAll();
		BoardView.boardPrint(bList);
	}

}
//DB 연결에 필요한 Util
package util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DBUtil {

	//1.DB������ ������ֱ�
	public static Connection getConnection() {
		Connection conn = null;
		String driverName = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@localhost:1521:xe";
		String userid="hr", password="hr";
		
		
		try {
			Class.forName(driverName);
			conn = DriverManager.getConnection(url, userid, password);
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return conn;
	}
	//2.�ڿ��ݳ� 
	public static void dbClose(ResultSet rs, Statement st, Connection conn) {
		try {
			if(rs!=null) rs.close();
			if(st!=null) st.close();
			if(conn!=null) conn.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
}






