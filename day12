//3월3일 12일차 thread 복습
package com.kosta.day12;

public class MailBox {
	String message;

	//getter ->reader /setter-> writer
	public synchronized String getMessage() {
		System.out.println("메시지읽음: "+message);
		if(this.message==null) {
			try {
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		String returnValue= message;
		message=null;
		notify(); //wait상태를 깨우기
		return returnValue;
	}

	public synchronized void setMessage(String message) {
		if(this.message!=null) {
			try {
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		this.message = message;
		notify();
		
		//System.out.println("메시지를변경: " +message);
	}
	
	
	
}
package com.kosta.day12;

//다중 상속을 받아!! thread 상속불가 그래서 Runnable 인터페이스 ㄱㄱ!
public class WriterThread implements Runnable {
	MailBox box; // mailbox 변수선언
	String[] messages; // 메시지들을 여러개를 넣는 배열
	String myName="WriterThread";
	public WriterThread(MailBox box, String[] messages) {
		this.box=box;
		this.messages=messages;
		Thread.currentThread().setName(myName);
	}

	@Override
	public void run() {
		for(String s: messages) {
			box.setMessage(s);
			System.out.println(myName+"-->"+s);
			System.out.println("******************************");
		}

	}

}
package com.kosta.day12;

public class ReaderThread extends Thread {
	MailBox box;
	int count;

	public ReaderThread(MailBox box, int count) {
		setName("ReaderThread임");
		//Thread.currentThread().setName("aaa");
		this.box = box;
		this.count = count;
	}

	@Override
	public void run() {
		for (int i = 0; i < count; i++) {
			String name = getName();
			String m = box.getMessage();
			System.out.println(name+"-->"+m);
			System.out.println("------------");
		
		}

	}

}
package com.kosta.day12;

public class ThreadTest {

	public static void main(String[] args) {
		method1();

	}

	private static void method1() {
		MailBox box = new MailBox();
		String[] messages= {"하이","열공","잘가!!"};
		Thread reader2= new ReaderThread(box,messages.length);
		Runnable write = new WriterThread(box, messages);
		Thread writerThread =new Thread(write);
		
		reader2.start();
		writerThread.start();
		
	}

}
////// stop // interrupt 메서드
//stop메서드
package com.kosta.day12;

// stop / interrupt
public class PrintThread1 extends Thread {
	private boolean stop;

	public PrintThread1() {
		setName(getClass().getSimpleName()+"쓰레드"); //이름주기
	}
	//멈추기위한 함수
	public void setStop(boolean stop) {
		this.stop=stop;
	}
	
	@Override
	public void run() {
		while(!stop) {
			System.out.println(getName()+" 작업실행");
		}
		System.out.println("자원종료");
		System.out.println("실행종료");
	}
	
}
package com.kosta.day12;

public class ThreadTest2 {

	public static void main(String[] args) {
		method1();

	}

	private static void method1() {
		Thread t1= new PrintThread1();
		t1.start();
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		((PrintThread1)t1).setStop(true);
	}

}
//interrupt 메서드
package com.kosta.day12;

// stop / interrupt
public class PrintThread2 extends Thread {

	public PrintThread2() {
		setName(getClass().getSimpleName() + "쓰레드"); // 이름주기
	}
	// 멈추기위한 함수

	@Override
	public void run() {
		try {
			while (true) {
				System.out.println(getName() + " 작업실행");
				sleep(1000);
			}
		} catch (InterruptedException aa) {
			//aa.printStackTrace();
			System.out.println("다른쓰레드가 인터럽드걸어서 나의 쓰레드 종료!");
		}
		System.out.println(getClass().getSimpleName() +" 자원종료");
		System.out.println(getClass().getSimpleName() +" 실행종료");
	}
}
package com.kosta.day12;

public class ThreadTest3 {

	public static void main(String[] args) {
		method1();

	}

	private static void method1() {
		Thread t1= new PrintThread2();
		t1.start();
		try {
			t1.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		t1.interrupt();
	}

}
/////데몬 쓰레드
package com.kosta.day12;

public class AutoSaveThread extends Thread {
	public AutoSaveThread(String name) {
		setName(name);
	}
	
	public void save() {
		System.out.println("자동저장합니다");
	}
	
	
	public void run() {
		try {
		while(true) {
			save();
			sleep(1000);
		}
		}catch(InterruptedException e) {
			System.out.println("interruptedException....");
		}
		
	}
}
package com.kosta.day12;

public class ThreadTest4 {

	public static void main(String[] args) {
		method1();

	}

	private static void method1() {
		AutoSaveThread t= new AutoSaveThread("자동저장쓰레드");
		t.setDaemon(true); //데몬으로 설정하기 ..main종료시 같이 종료
		t.start();
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//t.interrupt();
		
		
		System.out.println("main end");
	
	}

}
/////// 13장 Generic 제네릭

package com.kosta.day12.Generic;

public class Box<T> {
	//private Object object;  Object일떄
	private T object; //Generic 사용할떄

	public T getObject() {
		return object;
	}

	public void setObject(T object) {
		this.object = object;
	}
	

}
package com.kosta.day12.Generic;

public class GenericTest2 {

	public static void main(String[] args) {
		method1();

	}

	private static void method1() {
		// Object일떄
		Box b = new Box();
		b.setObject(100);
		int i = (int) b.getObject();
		System.out.println(i);

		b.setObject("Hello");
		String s = (String) b.getObject();
		// Integer s= (Integer)b.getObject();
		System.out.println(s);
		//Generic 사용할때 <T>
		
		Box<Integer> b1= new Box<Integer>();
		b1.setObject(100);
		int aa=b1.getObject();
		System.out.println(aa);
		
		Box<String> b2= new Box<String>();
		b2.setObject("Hello111");
		String s1=  b2.getObject();
		System.out.println(s1);

	}

}
/////
package com.kosta.day12.Generic;

public class Product<T,M> {
	private T kind;
	private M model;
	private int price;
	public Product(T kind, M model, int price) {
		super();
		this.kind = kind;
		this.model = model;
		this.price = price;
	}
	public T getKind() {
		return kind;
	}
	public void setKind(T kind) {
		this.kind = kind;
	}
	public M getModel() {
		return model;
	}
	public void setModel(M model) {
		this.model = model;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Product [kind=").append(kind).append(", model=").append(model).append(", price=").append(price)
				.append("]");
		return builder.toString();
	}
	
	
}
package com.kosta.day12.Generic;

public class NoteBook {

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("NoteBook []");
		return builder.toString();
	}

}
package com.kosta.day12.Generic;

public class TV {

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("TV []");
		return builder.toString();
	}
	
}
package com.kosta.day12.Generic;

public class Coffee {

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Coffee []");
		return builder.toString();
	}

}
package com.kosta.day12.Generic;



public class GenericTest3 {

	public static void main(String[] args) {
		method1();

	}

	private static void method1() {
		Product<TV, String> p1 = new Product<>(new TV(),"S1234",100);
		System.out.println(p1);
		Product<NoteBook, String> p2 = new Product<>(new NoteBook(),"N1234",120);
		System.out.println(p2);
		Product<Coffee, Integer> p3 = new Product<>(new Coffee(),234,40);
		System.out.println(p3);
	}

}
//////////
package com.kosta.day12.Generic;

public class Util {

	public static<A> Box<A> boxing(A t) {
		Box<A> b = null;

		return b;
	}

	public static <T> Box<T> boxing1(T t) {
		Box<T> b = new Box<>();
		b.setObject(t);
		return b;
	}
}
/////
package com.kosta.day12.Generic;

public class Util {

	

//	public static <T> Box<T> boxing1(T t) {
//		Box<T> b = new Box<>();
//		b.setObject(t);
//		return b;
//	}
//	
	public static<Integer> Box<Integer> boxing(Integer a) {
		Box<Integer> b= new Box<>();
		b.setObject(a);
		return b;
		
	}
}
package com.kosta.day12.Generic;



public class GenericTest4 {

	public static void main(String[] args) {
		method1();

	}

	private static void method1() {
		Box<Integer> a = Util.boxing(100);
		Box<Integer> b = Util.<Integer>boxing(100);
		
		
		
		Box<String>c= Util.boxing("Hello");
		Box<String>d= Util.<String>boxing("Hello");
		
		
		Box<TV>e= Util.boxing(new TV());
		Box<TV>f= Util.<TV>boxing(new TV());
		
		
		System.out.println(a.getObject());
		System.out.println(b.getObject());
		System.out.println(c.getObject());
		System.out.println(d.getObject());
		System.out.println(e.getObject());
		System.out.println(f.getObject());
		
	}

}
///////
package com.kosta.day12.Generic;

public class Pair<K,V> {
	private K key;
	private V val;
	
	//private이므로 getter/setter가 필요하다
	public K getKey() {
		return key;
	}
	public void setKey(K key) {
		this.key = key;
	}
	public V getVal() {
		return val;
	}
	public void setVal(V val) {
		this.val = val;
	}
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Pair [key=").append(key).append(", val=").append(val).append("]");
		return builder.toString();
	}
	
}
package com.kosta.day12.Generic;

public class Util {

	public static<K,V> boolean compare(Pair<K, V>p1,Pair<K, V>p2) {
		boolean result = false;
		result=p1.getKey().equals(p2.getKey())&&p1.getVal().equals(p2.getVal());
		
		
		return result;
	}

//	public static <T> Box<T> boxing1(T t) {
//		Box<T> b = new Box<>();
//		b.setObject(t);
//		return b;
//	}
//	
//	public static<Integer> Box<Integer> boxing(Integer a) {
//		Box<Integer> b= new Box<>();
//		b.setObject(a);
//		return b;
//		
//	}
}
package com.kosta.day12.Generic;



public class GenericTest5 {

	public static void main(String[] args) {
		method1();

	}

	private static void method1() {
		Pair<String, String> p1= new Pair<>();
		p1.setKey("이름");
		p1.setVal("사과");
		Pair<String, String> p2= new Pair<>();
		p2.setKey("이름");
		p2.setVal("오렌지");
		Pair<String, Integer> p3= new Pair<>();
		p3.setKey("한라봉");
		p3.setVal(1000);
		Pair<String, Integer> p4= new Pair<>();
		p4.setKey("한라봉");
		p4.setVal(1000);
		boolean b1 =Util.compare(p1, p2);
		System.out.println(b1);
		boolean b2 =Util.compare(p3, p4);
		System.out.println(b2);
	}

}
////// 제한된 타입 파라미터
package com.kosta.day12.Generic;
//Object <----- Number<-----Integer,Double,......

public class Util {
	//타입에 제한을 건다.
	public static<T extends Number> int compare(T a,T b) {
		
		double su1= a.doubleValue();
		double su2= b.doubleValue();
		
		int result= Double.compare(su1, su2);  
		//su1-su2
		// < = >
		
		
		return result;
	}
	
	
	
	
	
	
	
//	public static<K,V> boolean compare(Pair<K, V>p1,Pair<K, V>p2) {
//		boolean result = false;
//		result=p1.getKey().equals(p2.getKey())&&p1.getVal().equals(p2.getVal());
//		
//		
//		return result;
//	}

//	public static <T> Box<T> boxing1(T t) {
//		Box<T> b = new Box<>();
//		b.setObject(t);
//		return b;
//	}
//	
//	public static<Integer> Box<Integer> boxing(Integer a) {
//		Box<Integer> b= new Box<>();
//		b.setObject(a);
//		return b;
//		
//	}
}
package com.kosta.day12.Generic;



public class GenericTest6 {

	public static void main(String[] args) {
		method1();

	}

	private static void method1() {
		int result =Util.compare(10, 20);
		System.out.println(result);
	}

}
//////와일드카드!!
package com.kosta.day12.Generic;
//Person <---- Student <------HighStudent
//Person<------Worker
public class Person {
	private String name;

	public Person(String name) {
		super();
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Person [name=").append(name).append("]");
		return builder.toString();
	}




}
package com.kosta.day12.Generic;

public class Student extends Person {

	public Student(String name) {
		super(name);
		
	}
}
package com.kosta.day12.Generic;

public class Worker extends Person {

	public Worker(String name) {
		super(name);
	}
}
package com.kosta.day12.Generic;

public class HighStudent extends Student {

	public HighStudent(String name) {
		super(name);
		
	}

}
package com.kosta.day12.Generic;
//교육과정
public class Course<T> {
	private String name;
	private T[] students;
	
	public Course(String name,int capacity) {
		super();
		this.name = name;
		this.students= (T[])new Object[capacity];
		
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public T[] getStudents() {
		return students;
	}
	public void add(T t) {
		//배열의 빈곳에 한명의 학생을 추가한다.
		for(int i =0; i<students.length;i++) {
			if(students[i]==null) {
				students[i]=t;
				break;
			}
		}
	}
	
}
package com.kosta.day12.Generic;

import java.util.Arrays;

public class WildCardExample {

	public static void main(String[] args) {
		Course<Person> persons=makePerson();
		Course<Student> students=makeStudent();
		Course<HighStudent> highstudents=makeHighStudent();
		Course<Worker> workers =makeWorker();
		registerCourse(persons);
		registerCourse(students);
		registerCourse(highstudents);
		registerCourse(workers);
		System.out.println("!!!!!!Course2!!!!!!!!");
		registerCourse2(students);
		registerCourse2(highstudents);
		System.out.println("!!!!!!Course3!!!!!!!!");
		registerCourse3(persons);
		registerCourse3(students);
		System.out.println("!!!!!!Course4!!!!!!!!");
		registerCourse4(persons);
		registerCourse4(workers);
		
	}
	public static void registerCourse4(Course<? super Worker> cc) {
		System.out.println("*****"+cc.getName()+"******");
		String s= Arrays.toString(cc.getStudents());
		System.out.println(s);
		
	}
	public static void registerCourse3(Course<? super Student> cc) {
		System.out.println("*****"+cc.getName()+"******");
		String s= Arrays.toString(cc.getStudents());
		System.out.println(s);
		
	}
	public static void registerCourse2(Course<? extends Student> cc) {
		System.out.println("*****"+cc.getName()+"******");
		String s= Arrays.toString(cc.getStudents());
		System.out.println(s);
		
	}
	public static void registerCourse(Course<?> cc) {
		System.out.println("*****"+cc.getName()+"******");
		String s= Arrays.toString(cc.getStudents());
		System.out.println(s);
		
	}
	private static Course<Worker> makeWorker() {
		Course<Worker> pCourse=new Course<Worker>("직장인과정",2);
	
		pCourse.add(new Worker("직장인1"));
		pCourse.add(new Worker("직장인2"));
		
			
//		Object[] ps=	pCourse.getStudents();
//		myPrint(ps);
		return pCourse;
		
	}
	private static Course<HighStudent> makeHighStudent() {
		Course<HighStudent> pCourse=new Course<HighStudent>("고등학생과정", 2);
		
		
		pCourse.add(new HighStudent("고등학생1"));
		pCourse.add(new HighStudent("고등학생2"));
			
//		Object[] ps=	pCourse.getStudents();
//		myPrint(ps);
		return pCourse;
		
	}
	private static Course<Student> makeStudent() {
		Course<Student> pCourse=new Course<Student>("학생과정", 4);
		
		pCourse.add(new Student("학생1"));
		pCourse.add(new Student("학생2"));
		pCourse.add(new HighStudent("고등학생1"));
		pCourse.add(new HighStudent("고등학생2"));
			
//		Object[] ps=	pCourse.getStudents();
//		myPrint(ps);
		return pCourse;
		
	}
	private static Course<Person> makePerson() {
		Course<Person> pCourse=new Course<Person>("일반인과정", 8);
		pCourse.add(new Person("일반인1"));
		pCourse.add(new Person("일반인2"));
		pCourse.add(new Worker("직장인1"));
		pCourse.add(new Worker("직장인2"));
		pCourse.add(new Student("학생1"));
		pCourse.add(new Student("학생2"));
		pCourse.add(new HighStudent("고등학생1"));
		pCourse.add(new HighStudent("고등학생2"));
			
		//Object[] ps=	pCourse.getStudents();
		//myPrint(ps);
		return pCourse;
		
	}
	private static void myPrint(Object[] ps) {
		for(Object p:ps)
		{

			System.out.println(p);

			
		}
		System.out.println("------------------------");
	}

}
////////


